'Database'数据库: 按照数据结构来组织、存储和管理数据的仓库 
  PS: 每个数据库都有一个或多个不同的API用于创建,访问,管理,搜索和复制所保存的数据 
    使用关系型数据库管理系统'RDBMS'来存储和管理的大数据量 
  数据库系统的组成: 
    数据库'dataBase': 存放数据的仓库,按照一定的格式[有组织的方式]进行储存 
    数据库管理系统'dataBase Manager System': 建立、管理、维护数据库的系统软件 
    数据库应用系统'dataBase Application System': 使用到数据库技术的应用软件 
  数据模型一般由三个部分组成: 
    数据结构--对象与对象之间的关系 
    数据操作--增删改查 
    完整性约束--限定数据是有一定规则的,比如: 年龄不能为负数  
  常用的数据模型: 
    层次模型--一种树型结构来组织数据的数据模型 
    网状模型--用有向图结构来组织数据的数据模型 
    关系模型--一种用二维表格结构表示数据及数据之间联系的数据模型
  术语: 
    实体'Entity': 客观存在并可相互区别的事物称之为实体,如数据库中的表 
    属性'Attribute': 实体所具有的某一特性称之为属性,如表中的列 
    元组: 如表中的每一行 
    码'Key': 码也被称作是关键字,它可以唯一标识一个实体 
    候选码: 如果一组属性集能唯一地标识一个关系中的元组而又不含有多余的属性,则称该属性集为该关系的候选码 
      候选码可能不止有一个 
    主码: 用户选定的那个候选键称为主键 
RDMBS'Relational DataBase Management System'关系数据库管理系统 
  PS: 数据以表格形式出现,每行为各种记录名称,每列为记录名称所对应的数据域
    许多的行和列组成一张表单,若干的表单组成database
  描述: 
    是 SQL及所有现在关系型数据库系统的基础  
  关系型数据库遵循'ACID'规则  
    A'Atomicity',原子性: 事务里的所有操作要么全部做完,要么全部取消 
      事务成功的条件是事务里的所有操作都成功,
      只要有一个操作失败,整个事务就失败,需回滚 
    C'Consistency',一致性: 事务的运行不会改变数据库原本的一致性约束 
      例如现有完整性约束a+b=10,如果一个事务改变了a,那么必须得改变b, 
      使得事务结束后依然满足a+b=10,否则事务失败 
    I'Isolation',独立性: 并发的事务间不互相影响 
      如果一个事务要访问的数据正在被另外一个事务修改,只要另外一个事务未提交,
      它所访问的数据就不受未提交事务的影响 
    D'Durability',持久性 
      一旦事务提交后,它所做的修改将会永久的保存在数据库上,即使出现宕机也不会丢失 
  相关概念/术语[自我总结版本]: 
    数据库'Database': 表的集合  
      数据库的名字应该是唯一的 
    表'Table': 记录的集合,由一系列的行和列组成 
    行/记录/元组/项'Row': 一条数据,将表拆分为若干结构相同的部分 
    列/字段'Column': 表或记录的一部分,将表拆分为若干相对独立的部分 
    冗余'Redundancy': 存储两倍数据,使系统速度更快 
    主键'Primary Key': 唯一标识数据表中的行,必须包含唯一值,并且不能为 NULL 
    外键'Foreign Key': 唯一标识其他表中的一行,用于关联两个表 
      外键为单一字段或者多个字段的组合,并与另外一个数据表的主键相匹配
    索引'Index': 用于在数据库中快速创建或检索数据
      使用索引可快速访问数据库表中的特定信息  
      索引是对数据库表中一列或多列的值进行排序的一种结构,类似于书籍的目录  
    复合键/组合键'Compound Key': 复合键将多个列作为一个索引键,一般用于复合索引
      一种由多列组成的键,因为一列并不足以确定唯一性 
    NULL: 表中以空白形式出现的值,表示该记录在此字段处没有设值 
      NULL 值同 0 值或者包含空格的字段是不同的
      值为 NULL 的字段是在记录创建的时候就被留空的字段 
    NOT NULL: 保证列中数据不能有 NULL 值 
    DEFAULT: 提供该列数据未指定时所采用的默认值 
    UNIQUE: 保证列中的所有数据各不相同 
    CHECK: 此约束保证列中的所有值满足某一条件
    引用完整性'Referential Integrity': 用来确保外键一直指向已存在的一行    
    数据完整性: 
      实体完整性: 表中没有重复的行
      域完整性: 通过限制数据类型、格式或者范围来保证给定列的数据有效性
      参照完整性: 不能删除被其他记录引用的行
      用户定义完整性: 施加某些不属于上述三种完整性的业务规则 
    数据库规范化: 对数据库中的数据进行有效组织的过程
      目的: 减少数据的空间占用,并确保数据的逻辑完备 
        消除冗余数据,例如相同数据出现在不同的表中 
        保证数据依赖性合理 
    参照完整性: 参照的完整性要求关系中不允许引用不存在的实体 
      与实体完整性是关系模型必须满足的完整性约束条件,目的是保证数据的一致性 
'distributed system',分布式系统
  PS: 由多台计算机和通信的软件组件通过计算机网络连接[本地网络或广域网]组成 
    分布式系统是建立在网络之上的软件系统 ,
    正是因为软件的特性,所以分布式系统具有高度的内聚性和透明性 ,
    因此,网络和分布式系统之间的区别更多的在于高层软件[特别是操作系统],而不是硬件 ,
    分布式系统可以应用在在不同的平台上如:Pc、工作站、局域网和广域网上等 ,
  分布式计算的优点 
    可靠性[容错]:一台服务器的系统崩溃并不影响到其余的服务器 ,
    可扩展性: 在分布式计算系统可以根据需要增加更多的机器 ,
    资源共享: 共享数据是必不可少的应用,如银行,预订系统 ,
    灵活性:  由于该系统是非常灵活的,它很容易安装,实施和调试新的服务 ,
    更快的速度:分布式计算系统可以有多台计算机的计算能力,使得它比其他系统有更快的处理速度 ,
    开放系统: 由于它是开放的系统,本地或者远程都可以访问到该服务 ,
    更高的性能:相较于集中式计算机网络集群可以提供更高的性能[及更好的性价比] ,
  分布式计算的缺点 
    故障排除: 故障排除和诊断问题 ,
    软件: 更少的软件支持是分布式计算系统的主要缺点 ,
    网络: 网络基础设施的问题,包括:传输问题,高负载,信息丢失等 ,
    安全性: 开发系统的特性让分布式计算系统存在着数据的安全性和共享的风险等问题 ,
'NoSQL'非关系型的数据库 
  PS: 数据存储不需要固定的模式,无需多余操作就可以横向扩展
    用于超大规模数据的存储 
    在JSON格式的基础上诞生的,大部分NoSQL数据库允许JavaScript直接操作 
  RDBMS vs NoSQL
    ★RDBMS 
    高度组织化结构化数据 
    结构化查询语言'SQL' 
    数据和关系都存储在单独的表中 
    数据操纵语言,数据定义语言 
    严格的一致性
    基础事务
    ★NoSQL 
    没有声明性查询语言
    没有预定义的模式
    键 - 值对存储,列存储,文档存储,图形数据库
    最终一致性,而非ACID属性
    非结构化和不可预知的数据
    CAP定理 
    高性能,高可用性和可伸缩性
  NoSQL数据库分类 
    列存储: 按列存储数据
      方便存储结构化和半结构化数据,方便做数据压缩 
      对针对某一列或者某几列的查询有非常大的IO优势 
      部分代表: Hbase Cassandra Hypertable 
    文档存储: 用类似json的格式存储,存储的内容是文档型的 
      可对某些字段建立索引,实现关系数据库的某些功能 
      部分代表: MongoDB CouchDB
    key-val存储 
      通过key快速查询到其val
      一般来说,存储不管value的格式 
      部分代表: Tokyo Cabinet / Tyrant Berkeley DB MemcacheDB Redis
    图存储: 图形关系的最佳存储 
      部分代表: Neo4J FlockDB
    对象存储: 通过类似面向对象语言的语法操作数据库
      通过对象的方式存取数据 
      部分代表: db4o Versant
    xml数据库: 高效的存储XML数据
      支持XML的内部查询语法,比如XQuery,Xpath 
      部分代表: Berkeley DB XML BaseX
'CAP theorem'CAP定理,也叫布鲁尔定理 
  理论核心: 
   一个分布式系统不可能同时很好的满足以下三个需求,最多只能同时较好的满足两个. 
   'Consistency',一致性: 所有节点在同一时间具有相同的数据
   'Availability',可用性: 保证每个请求不管成功或者失败都有响应
   'Partition tolerance',分隔容忍: 系统中任意信息的丢失或失败不会影响系统的继续运作
  由此将NoSQL数据库分成以下三类: 
    满足 CA 原则: 单点集群,通常在可扩展性上不太强大 
    满足 CP 原则: 通常性能不是特别高 
    满足 AP 原则: 通常可能对一致性要求低一些 
BASE,NoSQL数据库对可用性及一致性的弱要求原则 
  'Basically Availble' --基本可用
  'Soft-state' --软状态/柔性事务 
    "Soft state" 可以理解为"无连接"的,而 "Hard state"是"面向连接"的 
  'Eventual Consistency' 最终一致性,即 ACID 最终目的 




















