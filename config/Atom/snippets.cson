'*':
  '--TODO ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ ':
    'prefix': 'todo self'
    'body': '// TODO: ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ '
  '--localStorage':
    'prefix': 'localStorage'
    'body': 'localStorage'
  '--sessionStorage':
    'prefix': 'sessionStorage'
    'body': 'sessionStorage'
  '--template':
    'prefix': 'template'
    'body': 'template'
  '--module':
    'prefix': 'module'
    'body': 'module'
  '--exports':
    'prefix': 'exports'
    'body': 'exports'

'.text.html.basic,.text.xml,.text.html.php':
  # 标签 ----------------------------
  '--<div>$1</div>':
    'prefix': 'div'
    'body': '<div>$1</div>'
  '--<div class="">$1</div>':
    'prefix': 'div-class'
    'body': '<div class="">$1</div>'
  '--<div id="">$1</div>':
    'prefix': 'div-id'
    'body': '<div id="">$1</div>'
  '--<template>$1</template>':
    'prefix': 'template'
    'body': '<template>$1</template>'
  # 属性----------------------------------
  '--style="$1"':
    'prefix': 'style'
    'body': 'style="$1"'
  '--class="$1"':
    'prefix': 'class'
    'body': 'class="$1"'
  '--id="$1"':
    'prefix': 'id'
    'body': 'id="$1"'
  '--placeholder="$1"':
    'prefix': 'placeholder'
    'body': 'placeholder="$1"'
  '--name="$1"':
    'prefix': 'name'
    'body': 'name="$1"'
  # php----------------------------------
  '--php test':
    'prefix': 'test-php'
    'body': 'test'
'.text.html.basic':
  # HTML------------------------------------------------------------------------
  '--<meta name="viewport" content="...">':
    'prefix': 'metaViewport'
    'body': '<meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=0">'
  '--<style>$1</style>':
    'prefix': 'style-inset'
    'body': '<style>\n\t$1\n</style>'
  '--<script src="$1" charset="utf-8"></script>':
    'prefix': 'script-src'
    'body': '<script src="$1" charset="utf-8"></script>'
  # 自定义组合--------------------------------
  '--self html':
    'prefix': 'html-self'
    'body': """
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>$1</title>
      <link rel="stylesheet" href="./css.css">
      <script src="./js/js.js" charset="utf-8"></script>
    </head>
    <body>
    </body>
    </html>"""
  '--self html-mobile':
    'prefix': 'html-mobile'
    'body': """
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=0">
      <title>$1</title>
      <link rel="stylesheet" href="../css.css">
    </head>
    <body>
    </body>
    </html>"""
  '--self cptTemplate':
    'prefix': 'cpt-template'
    'body': """
    <style>
    </style>
    <div>
    $1
    </div>
    <script type="text/javascript">
    $(function(){
    })
    </script>
    """ 
  '--self cptTemplate child':
    'prefix': 'cpt-template-child'
    'body': """
    <style>
    </style>
    <template id="c-xxx">
      <div id="xxx">
        $1
      </div>
    </template>
    <script type="text/javascript">
      Vue.component("c-xxx",{
        template : "#c-xxx",
        props : [],
        data : function(){
          return {
            msg: ''
          }
        },
        computed : {},
        methods : {},
      });
    </script>
    """ 
'.text.xml':   
  '-wx test':
    'prefix': 'test'
    'body': 'test'
  #  TODO .wxml-------------------------------------------

'.source.css,.source.css.less':
  # 选择器--------------------------------
  '--nth-child($1){$2}':
    'prefix': 'nthChild'
    'body': 'nth-child($1)'
  # 属性----------------------------------
  '--@keyframes ${1:name}{}':
    'prefix': 'keyframes'
    'body': """@keyframes ${1:name}{
      form{
      }
      to{
      }
    }"""
  '--animation:${1:name} 2s linear 1s infinite alternate;':
    'prefix': 'animation'
    'body': 'animation:${1:name} 2s linear 1s infinite alternate;'
  '--background-color: #b9e4e7;':
    'prefix': 'backgroundColorFast'
    'body': 'background-color: #b9e4e7;'
  '--border: solid blue 1px;':
    'prefix': 'border-fast'
    'body': 'border: solid blue 1px;'
  '--no-repeat':
    'prefix': 'noRepeat1'
    'body': 'no-repeat'
  '--transform:${1:translate(len1,len2)};':
    'prefix': 'transform'
    'body': 'transform:${1:translate(len1,len2)};'
  '--transition:all 5s ease 0.5s;':
    'prefix': 'transition'
    'body': 'transition:all 5s ease 0.5s;'
  '--translate(len1,len2)':
    'prefix': 'translate'
    'body': 'translate(len1,len2)'
  '--user-select':
    'prefix': 'user-select'
    'body': 'user-select:'
  # 值----------------------------------
  '--Microsoft YaHei':
    'prefix': 'MicrosoftYaHei'
    'body': 'Microsoft YaHei'
  '--no-repeat':
    'prefix': 'no-repeat1'
    'body': 'no-repeat'
  '--transparent':
    'prefix': 'transparent'
    'body': 'transparent'
  # 操作--------------------------------
  '--/* */':
    'prefix': 'zs'
    'body': '/* $1 */'
  '-less test':
    'prefix': 'test-less'
    'body': 'test'
'.source.css':
  '-test test':
    'prefix': 'test'
    'body': 'test'
  #  TODO  .wxss -------------------------------------------------------------

'.source.js':
  '--/* $1 */':
    'prefix': 'zs'
    'body': '/* $1 */'
  # operator 操作符  statement 语句  
  '--typeof':
    'prefix': 'typeof'
    'body': 'typeof'
  '--instanceof':
    'prefix': 'instanceof'
    'body': 'instanceof'
  '--try-catch':
    'prefix': 'try catch'
    'body': """try {
      } 
      catch (e) {
      } 
      finally {
      }"""
  '--for (var i = 0; i < $1; i++) { }':
    'prefix': 'for'
    'body': """for (var i = 0; i < $1; i++) {
      $2
    }"""
  '--for-in;':
    'prefix': 'forin'
    'body': """for(var ${1:key} in ${2:obj}){
      $3
    };"""
  # 自定义组合 ---------------------
  '--ajax pack':
    'prefix': 'ajax pack'
    'body':  """
      var xhr = new XMLHttpRequest();
      xhr.open('Method', 'Url', true);
      xhr.setRequestHeader('Content-Type', 'application/json'); // 可选
      xhr.onreadystatechange = function() {
        if(xhr.readyState === 4) {
          console.log('state change end', xhr);
          console.log(xhr.status);
          console.log(xhr.response);
          var response = JSON.parse(xhr.response);
          console.log(response);
        } 
        else {
          console.log('change');
        }
      }
      var aoo = { username: 'gua', password: '123', };
      var data = JSON.stringify(aoo);
      xhr.send(data); 
      """
  # TODO  ----------------------------------------------------------------------
  '-DM test':
    'prefix': 'test dom'
    'body': 'test'

'.text.html.vue':
  '-vue test':
    'prefix': 'test-vue'
    'body': 'test'


# 使用说明 
# e.g.:
#   # 提示 显示为
#   '-console.log()':
#     # 激活提示的词
#     'prefix': 'con'
#     # 最终的结果
#     'body': 'console.log($1);'
# 语法注释
# $1 表示光标的默认位置
# $2 按下 tab 键,光标跳到的第二个位置,以此类推
# ${1:name} 表示第一次会将 name 选中
# \n表示换行 \t tab缩进
# 提示 显示 字符开始不可使用下划线符号_
# """内容""" 创建保持格式的代码块 「"""...""" 代替'...'」
# 当激活字符一样时,后面的会覆盖掉前面的.
# 自定义Snippets的扩展词时,定义的格式的确定
#   在要定义的文档类型下,ctrl-Shift-p 输入代码  Editor: Log Cursor Scope
#   弹出字符如 txt格式的为 text.plain ,则.text.plain类似于.source.js表示一种文件格式
#   注意在前面加一个点.
# Question:
#   如何同时定义多个类型文件的代码提示

# 原始文档说明 留存 
# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
# -----------------------------------------------------------------------------

