介绍_概念_说明_定义
介绍：  
  css,cascading style sheets,层叠样式表
    是一种用来表现html或XML等文件样式的计算机语言.
    CSS1在1996年成为推荐标准.包含内容如字体、颜色、空白边等内容.
    CSS2在1998年成为推荐标准,增加了浮动定位、高级选择器等.
    CSS2.1在2002年启动开发,是对CSS2的修订版.
概念：  
  replaced element,替换元素
    指用来替换元素内容的部分并非由文档内容直接表示
    如img元素,它由文档本身之外的一个图像文件来替换
  nonreplaced element,非替换元素
    大多数HTML元素都是非替换元素,其内容由用户代理(通常是一个浏览器)在元素本身生成的框中显示.
  流式布局
    使用非固定像素来定义网页内容,也叫百分比布局
    通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩
  CSS层叠/覆盖原理
    PS:即产生冲突的规则
    规则(SelfThink)
      层叠:部分覆盖;覆盖:整体替换.
      选择器同名,声明块层叠
      属性同名覆盖
      规则优先级高的层叠低的
    e.g. :
      <div class="aoo boo" id="coo"> 12345 </div>
      .aoo{ border-radius: 50%; }
      .boo{ width: 100px; height: 100px; outline:dashed 1px red; }
      .boo{ width: 200px; background-color: pink; }
      #coo{ color: red; }
      /*四个选择器都产生了效果*/
    Remarks:
      Suggestion:将属性覆盖也改为层叠(有冲突时才覆盖),
        如同时定义 display:table 和 display:block 属性,他们同时起作用;
        定义 display:inline 和 display:block 两种属性有冲突,则优先级高起作用.
  css样式可引入html,jsp,php,asp,net等中使用
  注释 /*注释*/
    只对IE生效的注释
      <!--[if lt IE 7]>
        <link rel="stylesheet" type="text/css" media="screen" href="path/to/ie.css" />
      <![endif]-->
        这些代码的意思是：如果用户浏览器是IE6及以下,那这段代码才会生效。
        如果你想把IE7也包含进来,那么就把“[if lt IE 7]”改为“[if lte IE 7]”。
  IE8才开始支持css3
  CSS规则
    PS:一个CSS文件由多个CSS规则组成,
      每个规则都有两个基本部分:选择器(selector)和声明块(declaration block),
      声明块由若干个声明(declaration)组成,
      每个声明是一个属性-值对(property-value).
      值为一个关键字或该属性可取关键字的一个列表,
      关键字键用空格分开,只有一种情况例外:font属性中 字体大小/行高 
      若声明中使用了不正确的属性或者不正确的值,整个声明都会被忽略
  id class 命名
    类名由以字母开头的小写字母（a-z）、数字（0-9）、下划线（）、减号（-）组成。
    ID名称由不以数字开头的小写字母（a-z）、数字（0-9）、下划线（）组成。
定义：  
  自定义
    表明css样式作用的清晰的描述方式：a元素 指定 b样式 对 c元素 产生 d作用
    定义样式的顺序:位置 尺寸 表现样式
  常用约定规范
    命名规则根据'他们是什么'来命名,而非'他们表现为什么样子'来命名.
      如类的命名,定义一个红色的警告色,应命名为'警告'而非'红色',因为有可能后续将黄色作为警告色.
--------------------------------------------------------------------------------
css引入 
  ⒈行内样式表:
    PS:直接嵌在现有的标签中
      属性名、属性值为css规定. 
    <元素名 style="属性名1"属性值1;属性名2:属性值2;...""/>
    e.g. <p style="color:red;font-size=16px;">这些文字是红色的</p>
  ⒉嵌入式样式表:  <style>CSS</style>
    使用<style></style>标签嵌入到html文件的头部head中.
    e.g. 
      <style>
        <!--
        body{
          background:white;
          color:blue;
        }
        -->
      </style>
      <!---->用于当浏览器不支持样式表时,不会将样式表内容显示出来.现在基本上不在使用<!---->了(因为都支持)
  ⒊外部链接式样式表: <link href="css文件名.css">
    PS:将样式表写在一个独立的css文件中,使用<link>标签在head中引入
      主要用于实现表现与结构分离.
      必须放在head元素中,不能放在其他元素内部.
      推荐使用此方式.
    <link href="css文件名.css" rel="stylesheet" type="text/css"/>
  ⒋导入式"样式表":   @import url("css文件名.css");
    导入式样式表与连接式样式表的功能基本相同,
      <style  type="text/css">
        @import url("css文件名.css");
        @import url("css文件名.css");
      </style>
    主要使用方式:将多个css文件导入到某个综合的css文件中.
  link 和 @import 的区别
    link属于XHTML标签,在HTML文件中使用
    @import 是CSS2.1提供的用于加载CSS(有兼容问题,基本可以忽略),
      可在CSS文件中使用,也能在<style>标签中使用,
      在CSS文件中需在其他规则之前,否则会被忽略
    页面被加载的时,link会同时被加载,而@impot会等到页面被加载完再加载;
    与<link>相比,@import要慢,不光增加额外的请求数,还会导致不可预料的问题 ?
  四种引入方式的优先级: 
    内联式「行内样式」> 内嵌样式「内部式」> 链接式「外部式」> @import「导入式」
    引入时,后引入的具有优先
  Remarks:style标签也可以添加class属性
Style    样式   
  专题样式
    text   文本样式 
      PS:valign只有在表格标签中使用,字体无text-valign属性
      color           字体颜色
        当边框颜色未设置时,该属性的颜色值会应用到边框上
      letter-spacing  字母或文字间距
        PS:
          该样式在使用英文单词时,是设置字母与字母之间的距离
        normal   默认值,等价于0
        <length> 正值增加间距,负值减少间距
        inherit
      word-spacing    字间距
        PS:
          英文单词之间的间距使用word-spacing,当汉字之间存在空格时,该属性也能起作用.
        normal   默认值,等价于0
        <length> 正值增加间距,负值减少间距
        inherit
      word-wrap       文本换行
        PS:默认情况下一个足够长的单词不会在其内部换行,即使其长度大于一行宽,
          会默认超出到容器的外部.
          只有英文文本,或者连续的一连串数字才会出现不能自动换行的情况,而中文不存在,
          原因是因为英文文本之间没有加空格,浏览器会认为这是一个特别长的单词；
        normal     默认值,只在半角空格或连字符的地方换行
        break-word [只有在一行放不下一个单词时才会]在单词或url地址内部进行换行
        解决方法：
          1 在文本适当位置加空格,
          2 css代码中加上这行：word-wrap:break-word;
      word-break      文本换行
        normal    使用浏览器默认规则
        keep-all  只能在半角空格或连字符如逗号处换行,否则在一行显示
        break-all 尽可能的在单词内换行
        Remarks:
          word-wrap:break-word; 和 word-break:break-all; 的区别
            总的来说,后者更彻底
            word-wrap:break-word;一般处理情况为在单词间换行,当出现一行内放不下一个单词时才会在单词内换行.
            word-break:break-all;默认为单词内部换行.
      line-height     行高
        PS:设置行间的距离(行高)
          行高是指上下文本行基线间的垂直距离.
          行距是指一行底线到下一行顶线的垂直距离.行距也可以这么算：(行高-字体size)/2.
          内容区：底线和顶线包裹的区域
          具有继承性
        normal      默认,设置合理的行间距。
        number      设置数字,此数字会与当前的字体尺寸相乘来设置行间距。相当于倍数
        length      设置固定的行间距。
        %           基于当前字体尺寸的百分比行间距。
        inherit     规定从父元素继承line-height属性的值。
      text-indent     缩进
        PS: 
          允许使用负值。如果使用负值,那么首行会被缩进到左边,产生一种“悬挂缩进”的效果。
          无法将该属性应用到行内元素.
        pixels  定义固定的缩进,默认值为0
        em      文字大小的倍数
        %       父元素 width 的百分比
        inherit 规定应该从父元素继承text-indent属性的值。
      text-decoration 文本修饰
        PS:没有继承属性
        none         标准文本,默认值
        underline    下划线,链接文本的默认样式
        line-through 贯穿线
        overline     上划线
        blink        定义闪烁的文本 (可能存在兼容性问题)
        e.g. 
        同时定义多个文本修饰,使用空格隔开
          text-decoration:underline overline;
      text-transform  文本大小写转换
        uppercase   
        lowercase   
        capitalize  单词首字母大写
        none
      text-align      定义父元素指定其包含的行内元素的水平对齐方式 
        行内元素、文本、图片等设置如居中的样式.具有继承属性.
        left
        right
        center
        justify 两端对齐
      text-transform  文本大小写
        capitalize 单词首字母大写
        uppercase  字母大写
        lowercase  小写字母
        inherit    继承
      text-overflow   文本溢出显示方式
        PS:该属性只在当盒子中的文本在水平方向上超出时有效.
          若将white-space的属性值设为nowrap,使得盒子的右端不能换行显示,达到水平方向溢出的效果
        ellipsis  单行文本溢出显示为省略号
          单行溢出显示
            width:xxx; [也可以使用 max-width 代替 width]
            overflow:hidden;
            white-space: nowrap;
            /*前三个为前提条件*/
            text-overflow:ellipsis;
          多行溢出显示
            不支持多行文本溢出显示省略号
            可使用:after 来模拟
            e.g.:
            <div class="wrap">
              很多年以后,奥雷连诺上校站在行刑队面前,准会想起父亲带他去参观冰块的那个遥远的下午。当时,马孔多是个二十户人家的村庄,一座座土房都盖在河岸上,河水清澈,沿着遍布石头的河床流去,河里的石头光滑、洁白,活像史前的巨蛋。----加西亚·马尔克斯
              knowing something of everything and everything of something.
            </div>
            .wrap{
              width: 300px;
              height: 54px;
              overflow: hidden;
              text-overflow: ellipsis;
              position: relative;
            }
            .wrap:after{
              content: '...';
              position: absolute;
              bottom: 2px;
              right: 0;
              background-color: #fff;
              width: 30px;
              height: 20px;
            }
      text-shadow     文字阴影
        PS:css2.1中被删除,在css3.0中又恢复了使用.
        text-shadow:length1 length2 length3 color;
          length1 横向方向距离
          length2 纵向方向距离
          length3 可选,阴影模糊半径
          color   阴影的颜色,默认使用当前字体颜色
        指定多个阴影
          text-shadow:length1 length2 length3 color,length4 length5 length6 color,...;
      unicode-bidi    设置文本方向
        normal
        embed
        bidi-override
      direction       文本方向
        PS:对于行内元素,只有当unicode-bidi属性设置为embed或bidi-override时才会应用该属性
        ltr     默认,文本方向从左到右
        rtl     文本方向从右到左,从右向左的文本默认为rtl
        inherit 继承
      white-space  如何处理元素内的空白/元素的换行处理
        normal   默认,空白会被浏览器忽略
          换行符、多个连续的空格会转换为一个空格
        nowrap   文本不会换行,文本会在在同一行上继续,直到遇到 <br> 标签为止。
        pre      空白会被浏览器保留,其行为方式类似 HTML 中的 <pre> 标签。
        pre-wrap 保留空白符序列,但是正常地进行换行
        pre-line 合并空白符序列,但是保留换行符
        inherit  规定应该从父元素继承 white-space 属性的值。            
    font   字体样式「简写」 
      PS:font-size 和 font-family 属性必选 ,其他属性可选   
        缩写时没有固定的顺序   
      font- family    字体风格     
        PS:不要设置不常用的字体,若用户电脑上没有安装该字体,会显示浏览器默认的字体
          尽量选用通用的字体,当使用很特殊的字体时,可采用图片的形式决解. 可定义多个字体,字体用引号引起来,使用逗号隔开 (当为多个单词时使用引号) ?
          当前一个字体不支持时直接使用下一个 绝大部分中文字体里包含英文字母,而英文字体是不包含中文字符的
          因此字体设置,英文在前,中文在后,可避免中文字体改变英文字符     
        e.g.  
          div{font-family: "微软雅黑","楷体";}
          body{font-family:"Microsoft Yahei";} 或body{font-family:"微软雅黑";}
          注:第一种方法比第二种方法兼容性更好一些.     
        常用字体及英文表示 
          宋体         SimSun 
          黑体         SimHei 
          微软雅黑     Microsoft YaHei 
          微软正黑体   Microsoft JhengHei 
          新宋体   NSimSun 
          新细明体  PMingLiU
          细明体   MingLiU 
          标楷体   DFKai-SB 
          仿宋  FangSong 
          楷体  KaiTi 
          仿宋_GB2312 FangSong_GB2312 
          楷体_GB2312   KaiTi_GB2312 
        Mac OS的一些：   
          华文细黑：STHeiti Light [STXihei]   
          华文黑体：STHeiti   
          华文楷体：STKaiti   
          华文宋体：STSong   
          华文仿宋：STFangsong
        装Office会生出来的一些：
          隶书: LiSu   
          幼圆: YouYuan   
          华文细黑: STXihei   
          华文楷体: STKaiti   
          华文宋体: STSong
          华文中宋: STZhongsong   
          华文仿宋: STFangsong   
          方正舒体: FZShuTi   
          方正姚体: FZYaoti
          华文彩云: STCaiyun   
          华文琥珀: STHupo   
          华文隶书: STLiti   
          华文行楷: STXingkai   
          华文新魏: STXinwei   
      font-size       字号     
        PS:该属性设置元素的字体大小.实际上它设置的是字体中字符框的高度;
          实际的字符字形可能比这些框高或矮（通常会矮）。     
        %      参考对象为其父元素的 font-size     
        length 把 font- size 设置为一个固定的值。
        larger 比父元素更大     
        smaller     比父元素更小
        把字体的尺寸设置为不同的尺寸,从 xx-small 到 xx-large。 
          xx-small     x-small small medium
          默认值 large x-large xx-large     
          inherit     继承父元素的大小 (子元素会默认继承)   
      font-size-adjust  
      font- weight    字重     
        number    100-900的整百数(其中400=normal,700=bold)
        normal     
        lighter     
        bold     加粗     
        bolder     
      font-style      字体风格
        normal  默认     
        italic  斜体,对于没有斜体的特殊字体,将应用oblique.     
        oblique 倾斜,是正常竖直文本的一个倾斜版本.
          通常,italic和oblique文本看上去完全一样   
      font-variant    字体变形
        normal     
        small-caps  小型大写文字     
        inherit    
      font-stretch    字体水平拉伸  (CSS2.1 已删除该属性)     
      e.g.  
        p{   
          font-style:italic;   
          font-variant:small-caps;   
          font-weight:bold;   
          font-size:12px;   
          line-height:1.5em;   
          font- family:"宋体",sans-serif; 
          } 
        可简写为 
        p{   
          font:italic small-caps bold 12px/1.5em "宋体",sans-serif;  
          /* 在缩写font-size和line-height中间加/ */ 
        }
      使用系统字体
        PS:若希望一个Web页面结合用户操作系统的设置,font的系统字体值会很方便,
          这些值用于取得操作系统中元素的字体大小、字体系列、字体系列、
          字体加粗、字体风格等等, 并将其应用到一个元素.    
        caption 用于有标题的控件,如按钮     
        icon 用于对图标加标签     
        menu  用于菜单,即下拉菜单和菜单列表     
        message-box 用于对话框     
        small-caption 用于对小控件加标签     
        status-bar 用于窗口状态条     
        e.g.:
          .aoo{font:caption;} 
      自定义服务器端字体   
        PS:@font-face 已经从CSS2.1中去除   
        @font-face{
          font-family:(自定义的)"字体名称" 
          src:url(字体文件地址)  
          src:url(字体文件地址)     
          ...
        }   
        e.g.:   
          @font-face {     
            font-family: 'MyFont';
            src: url('myfont.eot'); /* IE6+ */     
            src: local('myfont.ttf'),
            url('myfont.woff') format('woff'), /* FF3.6 */
            url('myfont.ttf') format('truetype'); 
            /* FF3.5+, Saf3+,Chrome,Opera10+ */   
          }
      在页面上显示服务器端的字体
        使用@font-face属性来使用服务器端字体
        @font-face{ 
          font-family:XX;
          src:url(XXX.otf) format("opentype");
        }     
        使用XX来定义一个服务器端的字体
        fromat声明字体文件的格式,可以省略文件格式的声明,单独使用src属性值. 字体格式  字体属性 otf opentype ttf
          truetype eot embedded-opentype (只有IE支持) e.g. @font-face{ font-
          family:webFont; src:url(XXX.otf)format("opentype");     }     h1{ font-
          family:webFont;     }
    
      显示客户端本地的字体
        将font-family设置为本地的字体名,然后将src属性设置为local("字体")
          e.g. @font-face{
                font-family:Arial;
                src:local("Arial");
              }
    background 背景 「简写」
      PS:通常建议使用简写方式,而非使用单个属性,
        因为该属性在较老的浏览器中兼容性更好,且键入的字母更少
      Exp:background:背景颜色 url() 重复 位置
      e.g.  background:green url(图片地址) no-repeat 20px center;
      background-color      背景颜色
        PS:为元素设置一种纯色
          颜色会填充元素的内容、内边距和边框区域,扩展到元素边框的外边界,但不包括外边距
          如果边框有透明部分,如虚线边框或透明色,会透过这些透明部分显示出背景色
        属性值:
          transparent 默认,背景颜色为透明。
          color_name  规定颜色值为颜色名称的背景颜色(比如 red)。
          hex_number  规定颜色值为十六进制值的背景颜色(比如 #ff0000)。
          rgb_number  规定颜色值为 rgb 代码的背景颜色(比如 rgb(255,0,0))。
          inherit     规定应该从父元素继承 background-color 属性的设置。
      background-image      背景图片
        PS:背景图片的显示覆盖在背景颜色上
        background-image:url(图片地址);
          url('URL')  指向图像的路径
          none    默认值,不显示背景图像
          inherit 规定应该从父元素继承 background-image 属性的设置。
        一个元素中可设置多个背景图片
          background-image:url(url),(url)...; 位置顺序依次是上右下左
      background-repeat     背景图片重复
        repeat     默认,背景图像将在垂直方向和水平方向重复
        repeat-x   背景图像将在水平方向重复
        repeat-y   背景图像将在垂直方向重复
        no-repeat  背景图像将仅显示一次
        inherit    规定应该从父元素继承 background-repeat 属性的设置
      background-position   背景位置
        PS:若仅规定了一个值,另一个值默认为50%, 可以混合使用 % 和 position 值,
          但最好不要混用固定值和百分比(实质关键字也是百分比),可能导致错误.
        Exp: background-position:X轴 Y轴; 设置背景图像的起始位置
          使用固定值,表示背景的左上角相对于元素边框外侧左上角的坐标;
          使用百分比或position关键字,表示相对于背景左上角百分比(参考背景自身)的坐标点,
            相对于元素边框外侧左上角的百分比(相对于元素)的坐标.
        position  关键字:top、right、bottom、left和center
        %         左上角是 0% 0%。右下角是 100% 100%
        length    尺寸值
      background-size       背景图像尺寸
        CSS3属性,支持IE9+
        auto    默认值,保持图片的原始宽、高
        length  设置背景图像的高度和宽度。
          第一个值设置宽度,第二个值设置高度。如果只设置一个值,则第二个值会被设置为 "auto"。
        %       以父元素的百分比来设置背景图像的宽度和高度。
          第一个值设置宽度,第二个值设置高度。如果只设置一个值,则第二个值会被设置为 "auto"。
          设置 background-size:100% 100%; 就可以图片自适应宽高了.
        cover   把背景图像扩展至足够大,以使背景图像完全覆盖背景区域。
          背景图像的某些部分也许无法显示在背景定位区域中。
          图片保持宽高比缩放,长宽都铺满为止(可能会有溢出)
        contain 把图像图像扩展至最大尺寸,以使其宽度和高度完全适应内容区域。
          图片保持宽高比缩放,长宽有一个铺满即可(可能会有漏白)
      background-clip       指定背景的显示范围
        border-box   默认值,背景在border区域内进行填充,超出部分将被裁剪掉;
        padding-box  背景在padding区域内进行填充,超过padding区域的背景将被裁剪掉;
        content-box  背景在content区域内进行填充,超过content区域的背景将被裁剪掉;
      background-origin     指定背景图像时的填充起点
        border-box  起始位置从border的外边缘开始显示背景图片;
        padding-box 默认值,背景图像相对于内边距框来定位
        content-box 背景图像相对于内容框来定位
      background-break      指定行内元素的背景图像进行平铺时的循环方式.
        continues:
        bounding-box:
        each-box:
      background-attachment 规定背景图像是否固定或者随着页面的其余部分滚动
        scroll ,默认值
        fixed
        inherit
    filter 滤镜
      PS:-webkit-filter:
      grayscale 灰度
      sepia 复古色
      saturate 饱和度
      hue-rotate 色相旋转
      invert  反色
      opacity 透明度
      brightness 亮度
      contrast 对比度
      blur 模糊
      drop-shadow 阴影
      e.g.
    transition 指定变化的过渡效果 「IE10+」「CSS3+」
      PS: 允许css的属性值在一定的时间区域内平滑的过渡,
        当指定的 CSS 属性改变时,过渡效果将开.
        并非所有的CSS属性都支持transition.
      transition:property duration timing-function delay; 简写方式
        同时指定多个动画可用逗号分隔,如 transition:width 2s,height 2s;
        property        指定参与过渡的属性
          规定应用过渡效果的css属性的名称,当指定的css属性改变时,过渡效果将开始
          all       默认,值所有属性都将获得过渡效果
          none      没有属性会获得过渡效果
          属性名列表 定义应用过渡效果的css属性名称列表,列表以逗号分隔.
        duration        必须,过渡持续时间,指定以秒s或毫秒ms为单位
        timing-function 过渡的速度变化
          ease        逐渐变慢
          linear      匀速
          ease-in     加速
          ease-out    减速
          ease-in-out 加速后减速
          cubic-bezier(n,n,n,n)在cubic-bezier函数中定义自己的值.n在1到1之间.
        delay           开始执行的延迟时间,指定以秒s或毫秒ms为单位
      ◆单独指定:
      transition-property:  指定参与过渡的属性
      transition-duration:  过渡持续时间
      transition-timing-function:  变换速度
      transition-delay:     延迟时间
      e.g. :
        <div></div>
        div {
          width:100px;
          height:100px;
          background:blue;
          transition:width 2s;
          -webkit-transition:width 2s; /* Safari and Chrome */
          -moz-transition:width 2s;    /* Firefox 4 */
          -o-transition:width 2s;      /* Opera */
        }
        div:hover { width:300px; }
    animations 自定义关键帧动画  「IE9+」「CSS3+」
      PS:通过关键帧以及每个关键帧中的属性值来实现更为复杂的动画效果
      animation:name dura tim-func delay ite-cou direc; 简写方式
        name     关键帧名称
        duration 完成动画的时间(单位为秒或毫秒,0则无动画)
        timing-function 动画变化速度的曲线
        delay           动画开始前的延迟
        iteration-count 动画执行的次数
        direction       是否轮流反向播放动画
      ◆分别定义
      animation-name     关键帧名称
        keyframename 自定义的关键帧名称
        none 无动画效果(可用于覆盖来自级联的动画)
      animation-duration 完成动画的时间,单位为秒或毫秒(默认为0)
      animation-timing-function 动画的速度曲线
        ease 默认,平滑,等于 cubic-bezier(0.25,0.1,0.25,1.0)
        linear    匀速,等于 cubic-bezier(0.0,0.0,1.0,1.0)
        ease-in   加速,等于 cubic-bezier(0.42,0,1.0,1.0)
        ease-out  减速,等于 cubic-bezier(0,0,0.58,1.0)
        ease-in-out 慢快慢, cubic-bezier(0.42,0,0.58,1.0)
        cubic-bezier(n,n,n,n) 自定义cubic-bezier函数 (取值为0-1)
      animation-delay    动画开始之前的延迟(默认为0)
      animation-iteration-count 动画执行的次数
        num      自定义的次数
        infinite 无限次
      animation-direction  是否轮流反向播放动画
        normal      默认,首次正序运行,每周期结束从头到尾运行
        reverse     首次反向运行,每周期结束动画由尾到头运行
        alternate   首次正序运行,后续动画交替运行,时间功能函数也相应的调整
          比如 ease-in 反向时成为ease-out
        alternate-reverse 首次反向运行,后续动画交替运行,时间功能函数也相应的调整
      animation-fill-mode  指定动画执行之前和之后如何给动画目标应用样式
        none      默认值,回到最初状态
        backwards 采用相应第一帧的样式
        forwards  目标保持动画最后一帧的样式
          最后一帧是哪个取决于animation-direction和 animation-iteration-count:
        both      根据animation-direction（见后）轮流应用forwards和backwards规则
      animation-play-state: 定义动画暂停或播放状态
        通过该属性可以灵活的控制动画的播放状态
        running  播放,由暂停到播放时动画会接着暂停的状态开始运行
        paused   暂停,暂停时动画会保持暂停时的状态
      @keyframes 创建关键帧
        PS:以百分比来规定改变发生的时间,
          关键词 "from" 和 "to"(等价于 0% 和 100%).
          0% 是动画的开始时间,100% 动画的结束时间.
          为了获得最佳的浏览器支持,应该始终定义 0% 和 100% .
          @-webkit-keyframes 兼容写法
        @keyframes 名称{0%-100%关键帧代码}
        e.g.:
          @keyframes mymove {
            from {top:0px; background:red; width:100px;}
            25%  {top:200px;}
            50%  {top:100px;}
            75%  {top:200px;}
            100% {top:200px; background:yellow; width:300px;} }
          可以把多个状态写在一行,使用逗号分割
            @keyframes pound {
              from,to { transform: none; }
              50% { transform: scale(1.2); } }
      e.g. :
        <div></div>
        div {
          width:100px;
          height:100px;
          background:red;
          position:relative;
          animation:mymove 5s infinite;
          -webkit-animation:mymove 5s ease-in-out infinite alternate;
          /*Safari and Chrome*/ }
        @keyframes mymove {
          from {top:0px; background:red; width:100px;}
          25%  {top:200px;}
          50%  {top:100px;}
          75%  {top:200px;}
          100% {top:200px; background:yellow; width:300px;} }
        @-webkit-keyframes mymove {
          /*Safari and Chrome*/
          from {top:0px; background:red; width:100px;}
          25%  {top:200px;}
          50%  {top:100px;}
          75%  {top:200px;}
          100% {top:200px; background:yellow; width:300px;} }
    transform  变形处理 「IE9+」「CSS3+」
      translate 平移旋转:指定对象的2D平移
        Define:transform:translate(length1,length1)
          length1对应x轴,length2对应y轴,length2默认为0
      rotate    旋转:指定对象的2D旋转
        e.g. transform:rotate(90deg) 旋转90度
        顺时针旋转,deg是css3中的角度单位
      rotate3d  3d旋转
        e.g.:transform: rotate3d(1, 0, 0, 60deg);
      scale     缩放:指定对象的2D缩放
        语法:transform:scale(num1,num2)
          num表示缩放的倍数(不可为负),若num2未指定,则默认等于num1;
          num1对应x轴,num2对应y轴
        scalex(x)仅x轴缩放
        scaley(y)仅y轴缩放
      skew      扭曲
        e.g. transform:skew(20deg,30deg);
          第一个数值对应x轴,第二个数值对应y轴;
          若第二个数值未指定,则默认为0.即只在水平方向上倾斜
      可对一个元素使用多种变形的方法:
        transform:方法1 方法2...;
      transform-origin 定义旋转点
        PS:搭配属性,用于定义运动点
          若未定义默认以盒子的中心为运动点
        Define:transform-origin:X坐标值 Y坐标值;
          可能的值为:top、right、bottom、left、center(默认值)及上下左右的两两组合.
          只有一个参数时只在水平方向上移动.
    linear-gradient 线性渐变 
      PS: 渐变实质上属性特征为图片而非颜色值,
        故可设置background-image背景图片而不能设置背景色background-color
      -webkit-linear-gradient( [angle], <color position>+ )
        [angle]             可选,控制渐变的方向
          关键字: top「默认,从上到下」、right、bottom、left
            可组合使用,如果 left top 即从左上角开始
          角度值: 整数表示顺时针,负数表示逆时针;
            如270deg「默认值,等同于top」
        <color position>+   若干个位置及颜色,控制渐变的过程, 如: red 20% 
          position 可为像素值或百分比
      e.g.:
        .linearGradientTest { 
          background: -webkit-linear-gradient( top,#fff,#000); 
          /*从上到下,颜色由白到黑*/
          background-image: -webkit-linear-gradient(180deg,#fff,gray 20%,#000);
          /*180deg 则表示从右向左;从白色开始到20%处过渡到灰色,100%处过渡到黑色*/
          background-image: -webkit-linear-gradient( #fff, gray 20%, #000 );
          /*默认为270deg即top从上到下*/
          background-image: -webkit-linear-gradient( #fff 30%,  #000  60% );
          /*等价: -webkit-linear-gradient( #fff,#fff 30%,  #000  60% ,#000);*/
        }
      Remarks： 
    radial-gradient 径向渐变
      -webkit-radial-gradient([origin],[shape],<color position>+)
        PS:该方法需增加厂商前缀
        [origin]           定义渐变的起始点和方向, 默认为中心点
          关键字: cernter,top,right,bottom,left;默认为 center center
            当定义为 top 时,相当于 top center
        [shape]            渐变的形状
          circle  圆形
          ellipse 椭圆形
        <color position>+  渐变颜色及位置
          position 可以为百分比或像素值
            百分比值0%,或者长度值0,表示渐变中心点;
            百分比值100%表示渐变射线与边缘形状的相交点位置;
            其间的百分比值线性对应渐变射线上的点;
      radial-gradient(<r1 r2 at x y>, <color position>+);
        PS:Chrome可不加-webkit-前缀
        <r1 r2 at x y>    定义渐变圆心及半径,r为半径,x、y为圆心坐标
          可选关键字: 用于描述边缘轮廓的具体位置
            closest-side   相切
              圆形: 渐变的边缘形状与容器距离渐变中心点最近的一边相切
              椭圆: 或者至少与距离渐变中心点最近的垂直和水平边相切
            farthest-side   与closest-side相反
              边缘形状与容器距离渐变中心点最远的一边相切（或最远的垂直和水平边）。
            closest-corner  渐变的边缘形状与容器距离渐变中心点最近的一个角相交
            farthest-corner 渐变的边缘形状与容器距离渐变中心点最远的一个角相交
            contaner     刚好填充满整个容器
          e.g.:
            background-image: radial-gradient(
              ellipse farthest-corner at 45px 45px ,
              #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%);
            background-image: radial-gradient(
              ellipse farthest-corner at 470px 47px , 
              #FFFF80 20%, rgba(204, 153, 153, 0.4) 30%, #E6E6FF 60%);
            background-image: radial-gradient(
              farthest-corner at 45px 45px , 
              #FF0000 0%, #0000FF 100%);
            background-image: radial-gradient(
              16px at 60px 50% , 
              #000000 0%, #000000 14px, 
              rgba(0, 0, 0, 0.3) 18px, 
              rgba(0, 0, 0, 0) 19px);
        <color position>+ 若干个颜色值及位置
        e.g.:
          background-image:radial-gradient( 
            150px 100px at 50% 50% ,
            #c792b3 0%, #ac8671 30%, #d42cb3 50%, #7ac67a 100%
            );
    渐变重复 
      有两种方式可以重复背景图片
      background-repeat
      -webkit-repeating-radial-gradient和-webkit-repeating-linear-gradient 
      e.g.:
        background: -webkit-repeating-radial-gradient(
          #ace, #ace 5px, #f96 5px, #f96 10px);  
    color  颜色值
      英文单词表示 
        red green blue black white gray yellow pink gold orange 
        transparent「透明」
      rgb|rgba 
        rgb(num%, num%, num%) 
          num 范围 0-100,若小于0则为0,大于100则为100;
          e.g.: rgb(100%,0,0)
        rgb(num, num, num) 
          num 范围 0-255, 若小于0则为0,大于255则为255
        rgba(num, num, num, opacity) 
          opacity     可选,透明度值,范围0-1,默认为1,不透明;
      #RedGreenBlue  十六进制颜色 
        red、green、blue 分别表示两位16进制的数值「01-ff」,代表该颜色的浓度
        缩写形式 
          当设置的颜色是16进制的色彩值时,如果每两位的值相同,可以缩写一半.
          #000000 可缩写为 #000
          #336699 可缩写为 #369
      hsl 
        如 hsla(136, 64%, 65%, 0.82)
          第四个数值为透明度,可选,默认为1,不透明
      Web安全色: 在256色计算机系统上会避免抖动的颜色
        RGB值20%和51(相应的十六进制值为33)的倍数,0%或0也是.
    length 尺寸
      单位
        PS:px、em、％都是相对单位
          除了值为零的情况下(0后面可以不加单位),所有非零的值后面都要加单位.
        绝对长度单位
          in 英寸
          cm 厘米;mm 毫米
          pt 点: 标准印刷度量单位
        相对单位长度
        px 像素 指的是显示器上的小点(css规范中假设90px=1英寸),
          实际情况是浏览器会使用显示器的实际像素值有关,目前大多数设计者都倾向于使用像素px作为单位.
        ex: 所用字体中小写x的高度
          PS:使用不同的字体,其对应的ex大小可能不同
        em: 元素给定的font-size值大小
          PS:若font-size=10px,则1em=10px.
            em 相对于当前对象内文本的字体尺寸,并不是一个固定的值
            元素的字体大小会继承
            一般浏览器默认font-size=16px
            em 可以指定到小数点后三位.
          e.g. 
          p{font-size:12px;text-indent:2em;}
          /*上面代码就是实现段落首行缩进24px,也就是缩进两个字体大小的距离.*/
        rem: 根元素(html元素)的font-size值
          rem(root em,根 em) 和em类似 (一般,1rem=16px)
          e.g. :
            html {font-size: 62.5%;}  /*10 ÷ 16 × 100% = 62.5%*/
            body {font-size: 1.4rem;} /*1.4 × 10px = 14px */
            h1 { font-size: 2.4rem;}  /*2.4 × 10px = 24px*/
        vw: 相对于视窗的宽度width,视窗宽度为100vw
        vh: 相对于视窗的高度height,视窗高度为100vh
      calc(expression)  length数值运算 (CSS3新增)
        PS:
          适用于IE9+,移动端基本还不兼容
        使用规则:
          其中expression是一个表达式,用来计算长度的表达式,结果为length值
          使用“+”、“-”、“*” 和 “/”四则运算；
          表达式中有“+”和“-”时,其前后必须要有空格,如"widht: calc(12%+5em)"写法错误.
          表达式中有“*”和“/”时,其前后可以没有空格,但建议留有空格。
          可以使用百分比、px、em、rem等,混合使用各种单位进行计算；
        e.g. 
        width:calc(50% + 2em);
        浏览器会自动计算width的值
      zoom 比例缩放 (只有IE内核的浏览器支持)
        zoom:normal(默认值,使用对象的实际尺寸)/百分数(缩放比例)
        
        尺寸单位
      resize 是否可由用户调整元素的尺寸 (CSS3)
        none       用户无法调整元素的尺寸。
        both       用户可调整元素的高度和宽度。
        horizontal 用户可调整元素的宽度。
        vertical   用户可调整元素的高度。           
  通用样式
    outline 边线「简写属性」
      PS:outline类似border,但border会影响盒模型,而outline不会
      outline-style   边线样式
        none    默认值
        dooted dashed solid double groove ridge inset outset
        inherit
      outline-width   边线宽度
        thin medium thick length
        inherit
      outline-color   边线颜色
        color
        invert   执行颜色反转,可使轮廓在不同的背景颜色中都是可见
        inherit
      outline-offset  边线偏移
        length 轮廓与边框边缘的距离。
      e.g. outline:solid 1px red;
    opacity:0-1; 透明度「CSS3+」
      指定元素的不透明度,值从0.0(完全透明)到1.0(完全不透明)
      指定父元素的透明度后,其子元素的透明度不可改变 [?]
    cursor 光标悬浮样式
      PS:规定要显示的光标的类型、形状
        该属性定义了鼠标指针放在一个元素边界范围内时所用的光标形状,
        不过 CSS2.1 没有定义由哪个边界确定这个范围
      属性值:
        auto      默认值,浏览器设置的光标
        default   默认光标(通常是一个箭头)
        pointer   光标呈现为指示链接的指针(一只手)
        url       需使用的自定义光标的 URL
          PS:在列表的末端始终定义一种普通的光标,当自定义光标不起作用时备用
          e.g.:
          a{cursor: url(aa.png),pointer;}
        crosshair 光标呈现为十字线
        move      此光标指示某对象可被移动
        e-resize  此光标指示矩形框的边缘可被向右(东)移动
        ne-resize 此光标指示矩形框的边缘可被向上及向右移动(北/东)
        nw-resize 此光标指示矩形框的边缘可被向上及向左移动(北/西)
        n-resize  此光标指示矩形框的边缘可被向上(北)移动
        se-resize 此光标指示矩形框的边缘可被向下及向右移动(南/东)
        sw-resize 此光标指示矩形框的边缘可被向下及向左移动(南/西)
        s-resize  此光标指示矩形框的边缘可被向下移动(南)
        w-resize  此光标指示矩形框的边缘可被向左移动(西)
        text      此光标指示文本
        wait      此光标指示程序正忙(通常是一只表或沙漏)
        help      此光标指示可用的帮助(通常是一个问号或一个气球)
    visibility 元素可见性
      visible 默认值,元素是可见的
      hidden  使对象在网页上不可见,但会保留该元素在网页本该显示的空间.
      collapse 当在表格元素中使用时,此值可删除一行或一列,但是它不会影响表格的布局。
        被行或列占据的空间会留给其他内容使用。
        如果此值被用在其他的元素上,会呈现为 "hidden"。
    display 元素类型
      PS:html中的标签元素大体被分为三种不同的类型:块状元素、内联元素(又叫行内元素)和内联块元素.
        每个元素都有一个默认的 display 值,这与元素的类型有关。
        对于大多数元素它们的默认值通常是 block 或 inline 。
        css中可通过设置元素的display属性来转换.
      display: none;
        隐藏对象且不保留其物理空间
        位置不保留,但功能仍可用
          如display:none;的音频仍可以获取后播放;
          一些特殊元素的默认 display 值是它,例如 script 。
      display: inline;
        行内元素只能容纳文本或其他行内元素,它允许其他行内元素与其位于同一行
        定义宽度和高度不起作用(宽度和高度随着内容的大小变化)
        行内元素的margin属性只有margin-left和margin-right有用.
        常见行内元素有a、span、br、i、em、strong、label、q、var、cite、code等.
      display: block;
        当未定义块元素的尺寸时,该元素的宽度默认为父元素的宽度,高度为子元素的高度.
        可容纳行内元素和其他块元素,宽度和高度可设置.
        常用的块元素有:div、p、h1-h6、ol、ul、dl、table、address、blockquote、form 等等
      display: inline-block;
        可并列行显示,且可以指定宽高
        默认情况下使用inline-block类型时,并列显示的元素的垂直对齐方式是底部对齐,
        可使用vertical-align属性进行控制.
        常见的行内块元素:img、input、a
      display: table;              作为块级表格来显示(类似 <table>)(CSS3新增)
      display: table-cell;         元素会作为一个表格单元格显示(类似 <td> 和 <th>)(CSS3新增)
      display: inline-table;       将table元素和其他行内元素在同同一行显示 (CSS2新增)
      display: table-footer-group; 作为一个或多个行的分组来显示(类似 <tfoot>)
      display: table-header-group; 作为一个或多个行的分组来显示(类似 <thead>)
      display: table-row;          元素会作为一个表格行显示(类似 <tr>)
      display: table-row-group;    作为一个或多个行的分组来显示(类似 <tbody>)
      display: table-caption;      元素会作为一个表格标题显示(类似 <caption>)
      display: table-column;       作为一个单元格列显示(类似 <col>)
      display: table-column-group; 作为一个或多个列的分组来显示(类似 <colgroup>)
      display: list-item;  元素作为列表显示 (会在元素的开头加上列表的标记)
      display: inline-list-item;
      display: run-in;  元素会根据上下文作为块级元素或内联元素显示
      display: inherit; 规定应该从父元素继承 display 属性的值。
    display:none 和 visibility:hidden 的区别
      display:none 元素的宽度、高度等各种属性值都将丢失
      visibility:hidden 元素仅仅在视觉上看不见,而其所占据的空间位置仍然存在,
        即其仍有高度 宽度等属性值.
    user-select     文本选择控制
      兼容写法:
        -webkit-user-select:   /* Chrome all / Safari all /opera15+*/  
        -moz-user-select:      /* Firefox all */  
        -ms-user-select:       /* IE 10+ */  
        user-select: 
      auto    默认值,用户可以选中元素中的内容
      text    用户可以选择元素中的文本
      element 文本可选,但仅限元素的边界内(只有IE和FF支持)
      all     在编辑器内,如果双击或上下文点击发生在子元素上,该值的最高级祖先元素将被选中
      none    不可别选中
  标签及其样式
    list-style 列表标记样式 「简写」
      list-style-type  列表标记
        normal
        disc    实心圆
        none    无
        circle  空心圆
        square  实心方块
        decimal 数字
        circle  圆圈
        decimal-leading-zero 以0开头的标记
        lower/upper-roman    小/大写罗马数字
        upper/lower-alpha    大/小写英文字母
        upper/lower-latin    大/小写拉丁字母
        lower-greek          小写希腊字母
        ...
      list-style-image 标记设置为图像 
        url(图片地址)
        none
        inherit
        e.g.:
          ul li{list-style-image: url(aaa.png);}
      list-style-position 标记位置
        outset 默认值
        inset
        inherit
      list-position 标记位置
      e.g. 
        list-style:circle inside url(XXX/XXX.png);
        /*在图像加载错误时使用空心圆代替.*/
    table 表格
      table 表格
        PS:
          表格的display默认为table,独占一行
          display:inline-table; 定义一个行内表格,可以和其他行内元素共处一行.
        PS-Self:表格的行高度通过指定表格的高度和行的高度来设定.
        text-align      水平对齐方式
        border-collapse 定义表格决定其单元格边框样式
          separate  默认值,分隔,表框会被分开,相邻的单元格都拥有独立的边框
          collapse  合并,表格边框合并为一个单一的边框,使单元格之间没有边框间距.
        border-spacing  单元格间距
          border-spacing:length length;
          规定相邻单元格之间的距离,仅用于边框分离模式下
          第一个值表示水平间距,第二个值表示垂直间距,若只有一个值则表示水平和垂直.
        caption-side    表格标题位置
          top     默认值,表格标题定位在表格之上.
          bottom
          inherit
        empty-cells     是否显示表格中无内容的单元格
          常用于边框分离模式
          show    默认值,在空单元格周围绘制边框
          hide    不在空单元格周围绘制边框
          inherit
        table-layout    表格列宽度的指定方式
          auto  默认值,列宽度由单元格的内容长度定.
          fixed 列宽度通过指定表格的宽度和列宽度进行设定.
      thead 表头
        display:table-header-group; 
      tbody 表体
        display:table-row-group; 
      tfoot 
        display:table-footer-group; 
      colgroup
        display:table-column-group
      col
        display:table-column;
      caption 表格标题
        PS:其display:table-caption;
        caption-side
          top 默认值
          bottom 
      tr
        display:table-row; 
      td
        PS:其display为table-cell;
          table-layout 模式下,定义首行td的宽度才会生效,且该列宽度都如此.
        vertical-align
        text-align
      th
    a 链接
      链接的四种状态:
        a:link普通的未被访问的状态
        a:visited用户已访问的状态
        a:hover光标悬停在链接上的状态
        a:active链接被点击的状态
      属性
    ul  无序列表
      list-style 
      -webkit-padding-start: 40px;  列表的默认缩进
    ol  有序列表
      list-style 
    input 表单
      padding 
    textarea 文本域
      resize: none;  禁止缩放
  配件样式
    ::-webkit-scrollbar       滚动条样式
      .aoo ::-webkit-scrollbar {
        color: #fff;
        background-color: #8E8E8E;
        width: 10px;
        border-radius: 5px;
      }
    ::-webkit-scrollbar-thumb 滚动滑块样式
      .con-box-wrap ::-webkit-scrollbar-thumb {
        border-radius: 2px;
        background: #fff;
      }      
    :-webkit-autofill     自动填充表单的背景
      PS: chrome记住密码后,输入时,显示的提示的样式
        input:-webkit-autofill, 
        textarea:-webkit-autofill, 
        select:-webkit-autofill {
          background-color: rgb(250, 255, 189); 
          background-image: none;
          color: rgb(0, 0, 0);
        }
    -webkit-text-security 使用指定形状代替文字显示
      circle 圆圈 
      disc   圆形 
      square 正方形
      e.g.:
        <input type="text"   name="" value="">
        input{ -webkit-text-security:disc; text-security:disc; }
        
        <div class="" contenteditable="">123</div>
        div{
          -webkit-text-security:disc;
          background-color: green;
          height: 22px;
        }
  特殊样式
    -webkit-tap-highlight-color  点击链接或js定义的点击元素时,出现半透明灰色背景;
      PS:该属性只用于iOS,只有iOS「iPhone和iPad」的浏览器支持 , 「CSS3+」
        可设置-webkit-tap-highlight-color的颜色;
      禁用高亮: 设置颜色的alpha值为0即可
      e.g.:
        设置高亮色为50%透明的红色:
        -webkit-tap-highlight-color: rgba(255,0,0,0.5);
    -webkit-touch-callout        长按弹出菜单控制  「iOS」
      -webkit-touch-callout:none;  //禁用长按页面时的弹出菜单() ,img和a标签都要加    
  样式说明
    样式的特点
      ⒈继承
        网页中子元素将继承父元素的某些样式.如控制段落p中的文字大小,可以直接给body标记加样式.
      ⒉层叠(覆盖)
        网页中子元素定义了与父元素同类型的样式,则子元素的样式将覆盖掉父元素的样式
        当html标签内引用了多个同类型的样式时,后面定义的样式会覆盖前面定义的样式(与引用的先后顺序无关).
    CSS样式优先级
      优先级就近原则,同权重情况下样式定义最近者为准;
      载入样式以最后载入的定位为准;
      !important >内联 >  id > class > tag
Selector 选择器 
  PS: css样式由'选择符'和'声明'组成,声明又由'属性'和'值'组成 
    selector{
      key1:val1;
      key2:val2;
      ...
    }
    selector「也叫选择器」:指明该组样式所要针对的对象,可以是一个html标签,
      也可以是自定义的id或class标签「然后再在xhtml中进行指定,进行控制即可」
    key: 选择符的样式属性,如颜色、大小、定位、浮动方式等.
    val: 即为属性的值
  单体选择器 
    *        通配符选择器
      用于定义所有的html元素的样式.
      e.g. *{margin:0;padding:0}
      Remarks:通配符的效率最低,一般不使用,只将我们使用到的元素的默认值进行清零即可.
    tagName    元素选择器  
      也叫标签选择器,定义该中元素的样式
      Define:
        标签名称{
          ...
        }
    .aoo       class选择器 
      又叫类选择器,可以在网页中多次出现,用于定义多个重复的样式
      Define:
        .类名{
          属性1:值;
          属性2:值;
          ...
        }
      Remarks: 在html中引用:在标签只能插入 class="类名" 即可;
        一个元素可以应用多个类,类与类名之间使用空格隔开,如:class="类1 类2 ..."
        一个元素应用多个选择器,样式冲突时
          以css文件中最后一个出现的选择器为准(在html中放置的先后无关),如<span class="style1 style2">新闻3</span> 
    #aoo       id选择器 
      Define:
        #id名称{
          属性1:值;
          属性2:值;
          ...
        }
      PS:与类相似,因为id具有唯一性,只能被引用一次,
        用于定义只出现一次的样式(虽然多次使用可以起作用,但最好不要多次使用)
      Remarks:在需使用的标签元素内定义id名,如id="id名称".
      注:类名或id名不要使用数字开头
    [attrName]  属性选择器 
      PS:IE6=-不支持
      [attribute]        用于选取带有指定属性的元素。
      [attribute=value]  用于选取属性为指定值元素
        PS:该格式要求与属性值完全匹配
      [attribute~=value] 包含指定属性值的元素
      [attribute|=value] 用于选取属性带有指定词汇开头的元素
      [attribute*=value] 包含指定字符串的元素
      [attribute^=value] 以指定字符串开头的元素
      [attribute$=value] 以指定字符串结尾的元素
      e.g.:
        [title] { color:red; }
        [title='W3School'] { border:5px solid blue; }
        [title~='hello'] { color:red; }
    :not(选择器) 非选择器 
      某个结构元素使用样式,但想排除这个结构元素下的子结构元素不使用这个样式,可以使用not选择器
      e.g. 
        :not(h1){ color:green; }
        /*排除h1.指定其它元素的样式*/
    :empty      空元素选择器 
      当元素中内容为空时使用的样式.
      e.g.  :empty{ background:blue; }
    :root       根元素选择器 
      将样式绑定到页面的根元素中.在 HTML 中,根元素始终是 html 元素
      e.g. 区别body和根元素的区别
        :root{background-color: :blue; }
        body{ background-color: :pink; }
        注:当单独使用 body{ background-color: :pink; } 整个文档也被渲染了,
          是因为 单独指定body影响到了上面的样式 或许就是一个bug (?)
    ◆子选择器
    :nth-child(n)  指定任意元素的第几个子元素的样式 (CSS3新增)
      :nth-child(n)      匹配正数下来的第N个子元素
        e.g.  :nth-child(2){ outline:dashed 1px red; }
          /*为其属于父元素中的第二个子元素的元素添加边线*/
      :nth-child(odd)    匹配正数奇数个子元素
        或:nth-child(2n)
      :nth-child(even)   匹配正数偶数个子元素
      :nth-child(An+B)
        表示符合第 An+B 个的子元素
        e.g. 
          :nth-child(4n+1){
            outline:dashed 1px red;
          }
      /*倒数*/
      :nth-last-child(n)
      :nth-last-child(odd)
      :nth-last-child(even)
      e.g.  组合使用
        p:nth-child(2n){background-color:red;}
        /*为属于偶数子元素的p元素添加背景色.*/
    :last-child    指定任意元素的最后一个子元素的样式
      e.g.  :last-child {outline:dashed 1px red;}
    :only-child    当任意元素仅有一个子元素时,此一个子元素的样式
      e.g.  :only-child{ outline:dashed 1px red; }
    :first-of-type 指定同一级别中,任意一类元素中的第一个的样式
      e.g. 
        <div>1
          <p>11</p>
          <p>12</p>
          <span>13</span>
        </div>
        <div>2</div>
        如 1 11 13 为指定的元素
    :last-of-type  指定同一级别中,任意一类元素中的最后一个的样式
    :only-of-type  同一级别中,任意一类元素中只有一个时,指定其样式
    ◆伪元素
      PS:CSS3中规定伪元素使用::(但仍兼容:)
        IE8仅支持:after
    ::first-letter 向某个元素中的首字母或第一个文字使用样式
    ::first-line   向所有元素中的第一行文字使用样式(通过调整窗口改变第一行,也会响应)
    ::before   在元素内部头部定义
      配合属性:加入内容 content
        加入多个内容时,之间使用空格隔开
          e.g. content:url("XX.png") "前面是一张图片";
        content:"XX"      加入字符串,字符串内容会按原样显示
          可使用转义码,如:
          '\00AB'  双左箭头
          '\00BB'  双右箭头
        content:url(图片地址)    加入图片
        content:attr(属性名)    将元素的指定属性的属性值插入
          e.g.:
          在链接后增加 (链接地址)
          a:after {content: " (" attr(href) ")";}
        配合属性:定义符号 quotes 
          PS:quote字符类型(使用双引号""的时候需要使用转义字符\)
            open-quote开始字符;close-quote结尾字符
          e.g.:
            给h1元素内容使用()括起来.
            h1{ quotes:"(" ")" }  /*定义 open-quote 和 close-quote*/
            h1:before{ content:open-quote; }
            h1:after{ content:close-quote; }
        配合属性:计数器 counter
          content:counter(自定义名称,编号种类);  定义计数器(种类)
            可以使用list-style-type属性的值来指定编号的种类
            比如指定大写字母编号时,使用"upper-alpha"属性.
            种类可选,默认为阿拉伯数字
          counter-reset:计数器名称 重置编号;  计数器重置为"重置编号"
          counter-increment:计数器名称 num;  变化间隔
            当num为 -2 则,每次减少2个,若为3则每次增加3个
          e.g.:
            <body>
              <h1>HTML tutorials</h1>
                <h2>HTML Tutorial</h2>
                <h2>XHTML Tutorial</h2>
                <h2>CSS Tutorial</h2>
              <h1>Scripting tutorials</h1>
                <h2>JavaScript</h2>
                <h2>VBScript</h2>
              <h1>XML tutorials</h1>
                <h2>XML</h2>
                <h2>XSL</h2>
            </body>
            body {counter-reset:section ;}
            h1 {counter-reset:subsection ;}
            h1:before {
              content:"Section " counter(section) ". ";
              counter-increment:section;
            }
            h2:before  {
              content:counter(section) "." counter(subsection) " ";
              counter-increment:subsection;
            }
            效果:
              Section 1. HTML tutorials
                1.1 HTML Tutorial
                1.2 XHTML Tutorial
                1.3 CSS Tutorial
              Section 2. Scripting tutorials
                1.1 JavaScript
                1.2 VBScript
              Section 3. XML tutorials
                1.1 XML
                1.2 XSL
      e.g. 
        ::before{content:"加在每个元素前面的文字,包括未显示的"}
    ::after    匹配已选中元素的一个虚拟的最后子元素,这个虚拟元素默认是行内元素
      e.g.:
        纯CSS提示工具
        <p> 
          <span>鼠标悬浮查看提示信息</span>
          <span data-descr="文字提示1">查看</span>
          <span data-descr="文字提示2">文字</span>
          <span data-descr="文字提示3">提示</span>.
        </p>
        span[data-descr] {
          position: relative;
          text-decoration: underline;
          color: #00F;
          cursor: help;
        }
        span[data-descr]:hover::after {
          content: attr(data-descr);
          position: absolute;
          left: 0;
          top: 24px;
          min-width: 200px;
          border: 1px #aaaaaa solid;
          border-radius: 10px;
          background-color: #ffffcc;
          padding: 12px;
          color: #000000;
          font-size: 14px;
          z-index: 1;
        }
    ◆状态类
      PS:指定的样式只有当元素处于某种状态下时,才起作用,在默认状态下不起作用.
    :link        未访问时的状态
    :visited     访问过后的状态
    :active    匹配被用户激活的元素
      PS:它让页面能在浏览器监测到激活时给出反馈。
        当用鼠标交互时,它代表的是用户按下按键和松开按键之间的时间。
        :active 伪类通常用来匹配tab键交互。
        通常用于但并不限于 <a> 和 <button> HTML元素。
        这个样式可能会被后声明的其他链接相关的伪类覆盖,这些伪类包括 :link,:hover和 :visited。
        为了正常加上样式,需要把 :active的样式放在所有链接相关的样式后,
        这种链接伪类先后顺序被称为LVHA顺序: :link — :visited — :hover — :active。
      e.g.:
        <a href="#">这个链接在鼠标按下和松开的这段时间内会变成绿色</a>
        body { background-color: #ffffc9 }
        a:link { color: blue } /* 未访问链接 */
        a:visited { color: purple } /* 已访问链接 */
        a:hover { font-weight: bold } /* 用户鼠标悬停 */
        a:active { color: lime } /* 激活链接 */
    :hover     鼠标悬浮时的状态
      高阶用法:通过悬浮一个元素来改变另一个元素的状态
        PS:受到CSS选择器的parse和执行机制影响(至少在CSS3选择器的框架内)
          不能“通过后面的元素选择前面的元素”或者“通过子元素选择父元素”,
          只能“通过前面的元素选择后面的元素”和“通过父元素选择子元素”。
        通过父元素改变子元素的状态
          <div class="a">
            <div class="a1">
              00000
            </div>
            <div class="a2">
              11111
            </div>
          </div>
          .a:hover .a2{
            color: red;
          }
        通过前面元素改变后面元素的状态
          <div class="a">
            11111
          </div>
          <div class="b">
            2222
          </div>
          .a:hover+.b{ color: red; }
    :focus     元素获得焦点时
      主要是在文本框控件获得聚焦并进行文字输入使用
      e.g.  去除所有元素鼠标点击时出现的外边框
        :focus{ outline:none; }
    :target    为跳转到的锚点(元素)指定样式
      PS:该样式只在用户点击了页面中的超链接并且跳转到锚点(元素)后起作用.
      e.g. 
        /*跳转链接*/
        <a href="#A">连接A</a> <a href="#B">连接B</a> <a href="#C">连接C</a>
        /*锚点元素*/
        <div id="A">内容a</div> <div id="B">内容b</div> <div id="C">内容c</div>
        /*指定样式*/
        #B:target{ background:blue; color:red; }
    :first-child 指定任意元素的第一个子元素的样式
      e.g. 
        li:first-child{ background:red; }
    :lang()    语言选择器
      可为不同的语言定义特殊的规则
      :lang(c)  匹配lang属性等于c的元素
      e.g. 
        <p>文字<q lang="no">段落中的引用的文字</q>文字</p>
        q:lang(no){}
    :selection 当元素处于选中状态时 
      e.g. 当选取网页中的文字或文本框中的文字,改变其背景颜色.
        ::selection{background:blue;}
        input[type="text"]::selection{}
    :in-range      在范围内
      指定当元素的有效值被限定在一段范围之内,实际的输入值在该范围之内的样式
      e.g. 
        <input type="number" min="0" max="100">
        
        input[type="number"]:in-range{color:green;}
        input[type="number"]:out-of-range{color:red;}
    :out-of-range  超出范围
    :enabled     当元素处于可用状态时的样式
      e.g. input[type="text"]:enabled{}
    :disabled    匹配每个被禁用的元素(大多用在表单元素上)
    :read-only   当元素处于只读状态时的样式
      e.g. input:read-write{}
    :read-write  当元素处于可读写状态时的样式
    :checked     当表单中的radio单选框或者时checkbox复选框处于选取状态时的样式
      e.g. input:checked{}
    Remarks:
      ::before 和 :after 中的单冒号与双冒号的区别
        单冒号用于CSS3伪类,如 :active :focus :hover :visited 等等
        双冒号用于CSS3伪元素,如 ::first-letter ::first-line ::before ::after 等等
        一般都可以写成单冒号(CSS兼容)
  选择器组合: 将以上单体选择器进行组合使用 
    PS:此处使用A、B来当作选择器,进行表示
    A,B  所有获取 
      <div class="aoo"> aoo</div>
      <div class="boo"> boo</div>
      .aoo,.boo{color: red;} /*两个标签的字体都为红色*/
    AB   同时拥有获取 
      <div class="aoo boo"> 2 </div>
      .aoo.boo{color:red;}
    A B  后代获取 
      <div class="aoo">
        <div class="boo">
          123123
          <div class="coo"> 字体变红 </div>
        </div>
      </div>
      .aoo .coo{ color: red; }
    A>B  子元素获取 
      <div class="aoo">
        <div class="boo">
          字体变红
          <div class="boo"> 字体不变红 </div>
        </div>
      </div>
      .aoo>.boo{color: red;}
    A~B  同级获取 
      <div class="aoo">123 </div>
      <div class="boo">字体变红 </div>
      <div class="coo">123 </div>
      .aoo~.boo{color:red;}
    A-B  同级后序获取 
      <div class="boo">字体未变红 </div>
      <div class="aoo">123 </div>
      <div class="boo">字体变红 </div>
      .aoo-.boo{color: red;}
    A+B  同级相邻获取 
      <div class="boo">字体变红 </div>
      <div class="aoo">123 </div>
      <div class="boo">字体变红 </div>
      <div class="boo">字体未变红 </div>
      .aoo+.boo{color: red;}
  其他选择器 
    :invalid 和 :valid 伪类选择器 
      指定当元素不能/能通过html5使用的元素的属性所指定的检查或内容不符合元素规定的格式的样式.
      e.g. input[type="email"]:invalid{}
    nth-of-type 和 nth-last-of-type
    required 和 optional 伪类选择器
      required伪类选择器用来指定允许使用required属性
        而且已经指定了required属性的input元素、select元素以及textarea元素的样式
      optional伪类选择器用来指定允许使用required属性
        而且未指定required属性的input元素、select元素以及textarea元素的样式.
    indeterminate 
      只有火狐浏览器支持
      指定当页面打开时,一组单选框中没有任何一个单选框被设定为选中状态时,整组单选框的样式.
    :default 
      该属性只支持火狐浏览器
      用来指定当页面打开时默认处于选取状态的单选框或复选框的控件的样式
      e.g. input:default{}
  CSS表达式  
    attr() 用来获取选择到的元素的某一HTML属性值,并用于其样式。 [实验性API]
      PS:它也可以用于伪元素,属性值采用伪元素所依附的元素。
        attr() 表达式可以用于任何CSS属性。 
       attr( attribute-name <type-or-unit>? [, <fallback> ]? )
        attribute-name  是CSS所引用的HTML属性名称。
        <type-or-unit>  表示所引用的属性值的单位。
          如果该单位相对于所引用的属性值不合法,那么attr()表达式也不合法。
          若省略,则默认值为string。其合法值包括：
            string   <string>     属性值将被解析为  <string>  空字符串
            color    <color>  属性值将被解析为#xxx、#xxxxxx或关键字的形式,且必须为合法CSS <string> 值。
            前缀与后缀空格将被截掉。  当前颜色
            url   <uri>  属性值将被解析为可用于url()函数的字符串。
            相对URL是根据HTML文档的路径解析,而不是样式文件所在的路径。
            前缀与后缀空格将被截掉。  URL about:invalid,表示资源不存在。
            integer   <integer>  属性值将被解析为CSS <integer>。若不是合法值（不是整数或超出CSS属性规定的数字范围）,则使用默认值。
            前缀与后缀空格将被截掉。  0,或该属性允许的最小值（如果0是不合法的值）。
            number   <number>  属性值将被解析为CSS <number>。 若不是合法值（不是数字或超出CSS属性规定的数字范围）,则使用默认值。
            前缀与后缀空格将被截掉。  0,或该属性允许的最小值（如果0是不合法的值）。
            length   <length>  属性值将被解析为CSS <length>,带单位,比如 12.5em。 若不是合法值（不是长度值或超出CSS属性规定的范围）,则使用默认值。
            若属性值是一个相对长度, attr()会将其计算为绝对长度。
            前缀与后缀空格将被截掉。  0,或该属性允许的最小值（如果0是不合法的值）。
            em, ex, px, rem, vw, vh, vmin, vmax, mm, cm, in, pt, or pc   <length>  
            属性值将被解析为CSS <number>,不带单位,如 12.5,并被解释为带有所规定单位的 <length> 值。若不是合法值（不是长度值或超出CSS属性规定的范围）,则使用默认值。
            若属性值是一个相对长度, attr()会将其计算为绝对长度。
            前缀与后缀空格将被截掉。
            
            0,或该属性允许的最小值（如果0是不合法的值）。
            angle   <angle>  属性值将被解析为CSS <angle>,带单位,如30.5deg。若不是合法值（不是角度值或超出CSS属性规定的范围）,则使用默认值。
            前缀与后缀空格将被截掉。  0deg,或该属性允许的最小值（如果0deg是不合法的值）。
            deg, grad, rad   <angle>  属性值将被解析为CSS <number>,不带单位,如12.5),并被解释为带有所规定单位的 <angle> 值。若不是合法值（不是角度值或超出CSS属性规定的范围）,则使用默认值。
            前缀与后缀空格将被截掉。  0deg,或该属性允许的最小值（如果0deg是不合法的值）。
            time   <time>  属性值将被解析为CSS <time>,带单位,如30.5ms。若不是合法值（不是时间值或超出CSS属性规定的范围）,则使用默认值。
            前缀与后缀空格将被截掉。  0s,或该属性允许的最小值（如果0s是不合法的值）。
            s, ms   <time>  属性值将被解析为CSS <time>,不带单位,如30.5,并被解释为带有所规定单位的 <time> 值。。若不是合法值（不是时间值或超出CSS属性规定的范围）,则使用默认值。
            前缀与后缀空格将被截掉。  0s,或该属性允许的最小值（如果0s是不合法的值）。
            frequency   <frequency>  属性值将被解析为CSS <frequency>,带单位,如12.5kHz)。若不是合法值（不是频率值或超出CSS属性规定的范围）,则使用默认值。
            前缀与后缀空格将被截掉。  0Hz,或该属性允许的最小值（如果0Hz是不合法的值）。
            Hz, kHz   <frequency>  属性值将被解析为CSS <frequency>,不带单位,如12.5),并被解释为带有所规定单位的<frequency>值。若不是合法值（不是频率值或超出CSS属性规定的范围）,则使用默认值。
            前缀与后缀空格将被截掉。  0Hz,或该属性允许的最小值（如果0Hz是不合法的值）。
            %   <percentage>  属性值将被解析为CSS <number>,不带单位,如12.5),并被解释为带有所规定单位的 <percentage>值。若不是合法值（不是数字或超出CSS属性规定的范围）,则使用默认值。
            若属性值用作长度,attr()将其计算为绝对长度。
            前缀与后缀空格将被截掉。  0%,或该属性允许的最小值（如果0%是不合法的值）。
        <fallback>
          如果HTML元素缺少所规定的属性值或属性值不合法,则使用fallback值。
          该值必须合法,且不能包含另一个attr()表达式。
          如果attr()不是所在CSS属性值的唯一值,其<fallback>值必须为<type-or-unit>所指定的类型,
          否则CSS会使用相应<type-or-unit>定义的默认值（见上表）。
      e.g.:
        <p data-foo="hello">world</p>
        p:before { content:attr(data-foo) " "; }
  选择器的特性
    ⒈继承性:css的某些样式是具有继承性的,
      继承是一种规则,它允许样式不仅应用于某个特定html标签元素,而且应用于其后代.
      每个标签元素都有其默认的样式,只有某些样式可以继承,其他的样式仍按照其默认值.
      样式不会向上传播,但有一个例外:应用到body元素的背景样式可以传递到html元素(跟元素)
    ⒉优先级-权值:当一个元素被设置不同的css样式,而最终的显示样式则根据样式的优先级来定.
      浏览器根据权值来判断使用哪种css样式,权值高优先级就高.
      内联样式>嵌入样式>外部样式
      权值部分具体如下:
        元素选择器的权值为1
        类选择器的权值为10
        id选择器的权值最高为100.
        使用后代选择器组合则权值为多个选择器权值相加的和
        注:继承也有权值但很低,有的文献提出它只有0.1,所以可以理解为继承的权值最低.
    ⒊优先级-覆盖:当css权值相同时,会根据这些css样式的前后顺序来决定,
      处于后面定义的css样式会覆盖前面的.
    ⒋优先级-提升权重:使用 !important 来提升
      PS:
        当网页制作者未设置css样式时,浏览器会按照自己的一套样式来显示网页
        且用户也可以在浏览器中设置自己习惯的样式(比如把字好设置大一些).
        这时样式的优先级为:浏览器默认样式<网页制作者样式<用户自己设置的样式
        但是!important优先级样式是个例外,权值高于用户自己设置的样式.
      e.g. 
        p{color:red !important;}
        p{color:green;}
  媒体查询 Media Queries [IE9=+] [手机端浏览器都支持]
    PS:根据不同的媒体类型和条件,指定对应的样式
      媒体查询让css可以更精确作用于不同的媒体或同一媒体的不同条件.
      媒体查询可以用在css的@media和@import规则上,也可以被用字html和xml中.
      用来做响应式设计,即根据条件(如屏幕的宽度)来选用样式
      Media Queries是css3中的一个和各种媒体相关的重要模块.
    使用方式
      ◆在CSS中使用
      @media 设备类型 and (执行条件1) and (执行条件2){执行的样式}
        设备类型
          all 表示任何设备
          screen 常用的类型
          tv
        and 逻辑操作符 
          通过and ()添加条件,可以添加多个条件
      ◆在HTML中使用
      <link media="screen and (min-width:800px)"  href="xxx.css"/>
      ◆在CSS或HTML中使用
      @import url(XXX.css) screen and (min-width:800px);
    媒体类型
      all  适用于所有设备
      print 打印设备
        Intended for paged material and for documents viewed on screen in print preview mode. Please consult the section on paged media, and the media section of the Getting Started tutorial for information about formatting issues that are specific to paged media.
      screen 屏幕
        Intended primarily for color computer screens.
    逻辑操作符
      操作符 not,and 和 only 可以用来构建复杂的媒体查询。
        PS:若使用了 not 或 only 操作符,必须明确指定一个媒体类型。
      and  组合多个媒体属性,合并到同一条媒体查询中
        只有当每个属性都为真时,这条查询的结果才为真
        e.g.:
          @media (min-width: 700px) { ... }
          如果你只想在横屏时应用这个,你可以使用 and 操作符合并媒体属性：
          @media (min-width: 700px) and (orientation: landscape) { ... }
      not  对一条媒体查询的结果进行取反
        PS:not 关键字仅能应用于整个查询,而不能单独应用于一个独立的查询
          在逗号媒体查询列表中 not 仅会否定它应用到的媒体查询上而不影响其它的媒体查询。
        e.g.:
          not 在下面的查询中最后被计算： @media not all and (monochrome) { ... }
          等价于： @media not (all and (monochrome)) { ... }
          而不是： @media (not all) and (monochrome) { ... }
      only 仅在媒体查询匹配成功的情况下应用指定样式
        可以通过它让选中的样式在老式浏览器中不被应用。
      ,    将多个媒体查询以逗号分隔放在一起
        只要其中任何一个为真,整个媒体语句就返回真,相当于 or .
    媒体属性
      PS:大多数媒体属性可以带有“min-”或“max-”前缀,用于表达“最低...”或者“最高...”。
        这避免了使用与HTML和XML冲突的“<”和“>”字符。
        如果你未向媒体属性指定一个值,并且该特性的实际值不为零,则该表达式被解析为真。
        如果浏览器运行的设备上没有该属性值,包含这个属性值的表达式一般返回假。
          例如,在语音合成器上查询屏幕长宽比总是返回假。
      width         描述了输出设备渲染区域,如可视区域的宽度或打印机纸盒的宽度
        PS:可接受 min/max 前缀
          注意：用户调整窗口大小后,火狐浏览器会根据使用了width和height属性的媒体查询来切换合适的样式表。
        e.g.:
          如果你想向最小宽度20em的手持设备或屏幕应用样式表,你可以使用这样的查询：
          @media handheld and (min-width: 20em), screen and (min-width: 20em) { ... }
          
          这个媒体查询将向最小宽度8.5英寸的打印机应用样式表：
          <link rel="stylesheet" media="print and (min-width: 8.5in)"
              href="http://foo.com/mystyle.css" />
          
          这个查询适用于宽度在500px和800px之间的屏幕：
          @media screen and (min-width: 500px) and (max-width: 800px) { ... }
      height        描述了输出设备渲染区域,如可视区域的高度或打印机纸盒的高度的高度。
        PS:可接受 min/max 前缀：是
          注意：用户调整窗口大小后,火狐浏览器会根据使用了width和height属性的媒体查询来切换合适的样式表。
      device-height 描述了输出设备的高度,整个屏幕或页的高度,而不是仅仅像文档窗口一样的渲染区域
        PS:可否接受 min/max 前缀
        e.g.:
          向显示在最大宽度800px的屏幕上的文档应用样式表,你可以这样做：
          <link rel="stylesheet" media="screen and (max-device-width: 799px)" />
      device-width  描述了输出设备的宽度,整个屏幕或页的高度,而不是仅仅像文档窗口一样的渲染区域
        PS:可否接受 min/max 前缀
      aspect-ratio  描述了输出设备目标显示区域的宽高比
        PS:可接受 min/max 前缀
          该值包含两个以“/”分隔的正整数。
          代表了水平像素数（第一个值）与垂直像素数（第二个值）的比例。
        e.g.:
          下面为显示区域宽高至少为一比一的设备选择了一个特殊的样式表。
          这指定了宽高比或者1：1或者更大。换句话说,可视区域或者是正方形或者是宽屏。
          @media screen and (min-aspect-ratio: 1/1) { ... }
      device-aspect-ratio  描述了输出设备的宽高比
        PS:可否接受 min/max 前缀
          该值包含两个以“/”分隔的正整数。
          代表了水平像素数（第一个值）与垂直像素数（第二个值）的比例。
        e.g.:
          下面为宽屏设备选择了一个特殊的样式表。
          宽高比或者16：9或者16：10。    
          @media screen and (device-aspect-ratio: 16/9), screen and (device-aspect-ratio: 16/10) { ... }
      orientation   指定了设备处于横屏(宽度大于高度)模式还是竖屏(高度大于宽度)模式。
        e.g.:
          向竖屏设备应用样式表：
          @media all and (orientation: portrait) { ... }
      resolution    指定输出设备的分辨率(像素密度)
        PS:可接受 min/max 前缀：是
          分辨率可以用每英寸（dpi）或每厘米（dpcm）的点数来表示。
        e.g.:
          为每英寸至多300点的打印机应用样式：
          @media print and (min-resolution: 300dpi) { ... }
          
          替换老旧的 (min-device-pixel-ratio: 2) 语法：
          @media screen and (min-resolution: 2dppx) { ... }
      color         指定输出设备每个像素单元的比特值。如果设备不支持输出颜色,则该值为0。
        PS:可接受 min/max 前缀
          如果每个颜色单元具有不同数量的比特值,则使用最小的。
            例如,如果显示器为蓝色和红色提供5比特,而为绿色提供6比特,
            则认为每个颜色单元有5比特。
          如果设备使用索引颜色,则使用颜色表中颜色单元的最小比特数。
        e.g.:
          向所有能显示颜色的设备应用样式表：
          @media all and (color) { ... }
          
          向每个颜色单元至少有4个比特的设备应用样式表：
          @media all and (min-color: 4) { ... }
      color-index   指定了输出设备中颜色查询表中的条目数量。
        PS:可接受 min/max 前缀
        e.g.:
          向所有使用索引颜色的设备应用样式表,你可以这么做：
          @media all and (color-index) { ... }
          
          向所有使用至少256个索引颜色的设备应用样式表：
          <link rel="stylesheet" media="all and (min-color-index: 256)" href="http://foo.bar.com/stylesheet.css" />    
      grid          判断输出设备是网格设备还是位图设备
        PS:如果设备是基于网格的（例如电传打字机终端或只能显示一种字形的电话）,该值为1,否则为0。
        e.g.:
          向一个15字符宽度或更窄的手持设备应用样式：
          @media handheld and (grid) and (max-width: 15em) { ... }
          注意：“em” 在网格设备中有不同的意义；
          一个“em”的实际宽度不得而知,假设1em相当于一个网格单元的宽高。
      monochrome    指定了一个黑白（灰度）设备每个像素的比特数。如果不是黑白设备,值为0。
        PS:可接受 min/max 前缀：是
        e.g.:
          向所有黑白设备应用样式表：
          @media all and (monochrome) { ... }
          
          向每个像素至少8比特的黑白设备应用样式表：
          @media all and (min-monochrome: 8) { ... }
      scan          描述了电视输出设备的扫描过程。
        e.g.:
          向以顺序方式扫描的电视机上应用样式表：
          @media tv and (scan: progressive) { ... }
    主要功能
      检测媒体的类型.比如 screen  等
      检测布局视口的特性,比如视口的宽高分辨率等
        max-width 表示视口的最大宽度
        max-device-width 表示设备的最大宽度
      其他
        orientation:portrait | landscape  定义输出设备中的页面可见区域高度是否大于或等于宽度
          portrait： 指定输出设备中的页面可见区域高度大于或等于宽度
          landscape： 除portrait值情况外,都是landscape
        e.g.:
          @media screen and (orientation:portrait){ … }
          @import url(example.css) screen and (orientation:landscape);
    e.g. 
      浏览器窗口 不同的宽度使用不同的布局方案
      <div></div>
      <div></div>
      <div></div>
      *{margin:0;padding:0;}
      div{
        height:200px;
        background-image:url("http://www.simple-style.com/wp-content/uploads/2016/05/2-katie_paterson_hollow_1.jpg");
        background-repeat: no-repeat;
        float:left;
      }
      @media screen and (max-width:800px) {div{width:100%}}
      @media screen and (min-width:801px) and (max-width:1200px) {div{width:50%}}
      @media screen and (min-width:1201px) {div{width:33.33%}}
Layout   布局   
  布局一般分为四种类型：固定布局、可切换的固定布局、弹性布局、混合布局。
    PS：可切换的固定布局、弹性布局、混合布局都是目前可被采用的响应式布局方式：
      其中可切换的固定布局的实现成本最低,但拓展性比较差；
      而弹性布局与混合布局效果具响应性,都是比较理想的响应式布局实现方式。
      只是对于不同类型的页面排版布局实现响应式设计,需要采用不用的实现方式。
      通栏、等分结构的适合采用弹性布局方式、而对于非等分的多栏结构往往需要采用混合布局的实现方式。
      布局响应时不可避免地需要对模块布局做一些变化,
      发生布局改变的临界点称之为断点;
    固定布局：以像素作为页面的基本单位,不管设备屏幕及浏览器宽度,只设计一套尺寸;
    可切换的固定布局：同样以像素作为页面单位,参考主流设备尺寸,设计几套不同宽度的布局。
      通过设别的屏幕尺寸或浏览器宽度,选择最合适的那套宽度布局；
    弹性布局：以百分比作为页面的基本单位,可适应一定范围内所有尺寸的设备屏幕及浏览器宽度,
      并能完美利用有效空间展现最佳效果；
    混合布局：同弹性布局类似,可以适应一定范围内所有尺寸的设备屏幕及浏览器宽度,
      并能完美利用有效空间展现最佳效果；只是混合像素、和百分比两种单位作为页面单位。
  CSS的3种基本定位机制
    ◆css文档流
    流:在网页设计中就是指元素(标签)的排列方式.
    标准流:在网页布局中,排在前面的元素(标签)内容出现在前面,排在后面的元素(标签)内容出现在后面.
    非标准流:当某个元素(标签)脱离了标准流(如相对定位、绝对定位等)我们统称为非标准流. 
    ◆浮动
    ◆定位
  table布局: 早期使用表格table布局,现已很少使用纯表格布局
  box布局 
    PS:基于盒状模型,依赖display属性+position属性+float属性。
    display:inline、display:block、display:inline-block
      inline元素又叫行内元素,width和height属性无效果,
        可使用 line-height 来控制行高,但自身的content、padding尺寸无影响,
        会产生将其他元素支撑的效果或定位自身content的作用,但背景却无法渲染出来.
        行内元素中只能包含行内元素,若包含块元素则起不到包含作用.
      block元素又叫块元素,默认width为100%,
        line-height属性会增加自身的content的高度.
        块元素中可以包含快元素和行内元素.
      inline-block行内块元素,同时具有行内元素和块元素的特点. (CSS2.1新增)
    box      盒子模型篇
      PS: html元素都可以看成一个盒子,css布局主要通过盒子模型来实现.
      ◆盒子模型的四要素
        PS:只有外边距可为负
      margin  外边距
        PS:由于各个浏览器存在的内外边距默认值不同,将所有的默认内外边距都清零,方便操作
          详细属性: margin-top margin-right margin-bottom margin-left
        缩写方法: 
          (padding 缩写方式也是如此形式)
          margin:1px 2px 3px 4px; 上1右2下3左4;
          margin:10px 20px 30px;  右左为20;
          margin:10px 20px;       上下10,左右20;
          margin:10px;            上下左右10;
        auto   浏览器计算外边距
        length 长度值
        %      参考对象都是父元素的宽度width.
          (在默认的writing-mode: horizontal-tb;和direction: ltr;的情况下。)
        margin的特点
          垂直外边距合并
            PS:只有普通文档流中块框的垂直外边距才会发生外边距合并,
              行内框、浮动框或绝对定位之间的外边距不会合并.
              合并后的外边距的高度等于较大者的外边距的尺寸.
            在垂直方向,只要有margin相互接触且没有 border 或 padding 隔离,就会发生合并,如:
              一元素的 margin-bottom 和另一个元素的 margin-top 发生合并.
              父盒子的 margin-top 和 子盒子的 margin-top 发生合并
              自身的 margin-top 和 margin-bottom 发生合并
          对于 inline 元素,margin-top 和 margin-bottom 无效 
            (inline-block 和 block 元素无影响)
          margin:0 auto; 使元素在其父盒子中水平居中
            但该方法无法使元素垂直居中
      border  边框
        border(-top/right/left/bottom) 边框 「简写方式」
          PS: 缩写中 border-style 属性是必须的
            css中的color属性控制文本字体颜色和盒子边框颜色
          border(-top/right/bottom/left)-width 边框宽度
            PS: 可分别设置每条边 
            pixels
            thin
            medium
            thick
            inherit
          border(-left/right/top/bottom)-style 边框风格
            none    无
            solid   实线
            dashed  虚线
            dotted  点虚线
            double
            groove
            ridge
            inset
            outset
            inherit
          border(-top/right/bottom/left)-color 边框颜色
            e.g. : 分别定义四条边的颜色
              <span class="aaa">123</span>
              .aaa{
                border: 10px solid;
                border-color:red green blue gray;
              }
              /*注意需将border-Color 放置在后面,否则会被border的默认黑色覆盖*/
          e.g. border：solid 2px red；
        border-radius 边框圆角「简写方式」「CSS3+」
          PS:当设置了该属性,当未设定边框属性,则会将背景显示为圆角的状态.
            使用 -webkit 和-moz 前缀兼容浏览器
          border-radius: (length|%){1,4} / (length|%){0,4}；
            长度值或百分比值定义四分之一椭圆的两个半径
            /前面是水平半径,/后面是垂直半径。
            如果省略垂直半径,则默认等于水平半径
            水平半径的百分比值参考边框盒的宽度,而垂直半径的百分比值参考边框盒的高度。
          e.g. 
            border-radius: 2em 1em 4em / 0.5em 3em;
            等价于
            border-top-left-radius: 2em 0.5em;
            border-top-right-radius: 1em 3em;
            border-bottom-right-radius: 4em 0.5em;
            border-bottom-left-radius: 1em 3em;
          border-top/bottom-left/right-radius:水平半径 垂直半径;  定义单个圆角
        border-image  边框图片「CSS3+」 
          border-image:url() 上边距 右边距 下边距 左边距/上 右 下 左边框宽度 repeat/stretch/round repeat/stretch/round;
        border:none 与 border:0 的区别
          border:0 相当于 border-width:0,
          浏览器依然对border-width、border-color 进行了渲染占用了内存
          border:none 实际效果等同于border-style:none,
          浏览器解析“none”时将不作出渲染动作不会消耗内存
          IE6、IE7中,border为“none”时,标签button、input边框依然存在
      padding 内边距
        PS:属性值不能为负值
        %   参考对象都是父元素的宽度width
        inline元素的padding的上下无效果(仅产生背景)
          padding的左右可将其他元素支撑或将自己的content定位,
          上下无作用,唯一效果会使背景渲染出来(即当无背景色时相当于无上下padding),
          且将背景会覆盖到前后其他块元素的背景上,但不会覆盖其他元素的内容,
          后面的inline元素背景覆盖前面的背景.
      content 内容
        PS:当父元素无高度依靠子元素的高度将其撑开时,
          父元素在显示上等于子元素高度,实际上其他子元素继承不到其高度;
          width height 即定义content的宽高
        width  宽度 
          auto          默认值。浏览器可计算出实际的宽度。
          length        使用 px、cm 等单位定义宽度。
          %             父元素宽度的百分比(给父元素设定的宽度,而非父元素计算后的宽度)
        height 高度 
          auto          默认。浏览器会计算出实际的高度。
          length        使用 px、cm 等单位定义高度。
          %             其父元素的百分比高度(给父元素设定的高度,而非父元素计算后的高度)
          inherit 规定应该从父元素继承 height 属性的值。
        max-width    最大宽度
        max-height   最大高度
        min-width    最小宽度
        min-height   最小高度
      盒模型特点
        盒子模型有两种,分别是IE盒子模型和标准W3C盒子模型
          那应该选择哪中盒子模型呢？当然是“标准 w3c 盒子模型”
          怎么样才算是选择了“标准 w3c 盒子模型”呢？很简单,就是在网页的顶部加上 doctype 声明。
          假如不加 doctype 声明,那么各个浏览器会根据自己的行为去理解网页,
          即 ie 浏览器会采用 ie 盒子模型去解释你的盒子,
          而 ff 会采用标准 w3c 盒子模型解释你的盒子,所以网页在不同的浏览器中就显示的不一样了。
          反之,假如加上了 doctype 声明,那么所有浏览器都会采用标准 w3c 盒子模型去解释你的盒子,
          网页就能在各个浏览器中显示一致了。
        盒模型要素设置为 auto时
          当没有属性为auto,且存在冲突时,会强制margin-right为auto,
          当有一个值为auto时,会自动调节设置为auto属性的值使元素框的宽度等于父元素的width,
          当margin-left和margin-right为auto时,会被设置为相等的宽度,从而达到内容居中的效果,
          当width和一margin为auto时,该margin会被设置为0,
          当三个值都为auto时,两个外边距都会被设置为0,即默认的情况
          正常流中,margin-top或margin-bottom设置为auto,会被重置为0,
          height为auto时,则显示其高度会尽可能的小,
      box-sizing 盒模型定义类型 「CSS3+」
        content-box;  默认值,width height 为content的宽、高尺寸
        border-box;   width height 为border的宽、高尺寸
      box-shadow 盒子阴影      「CSS3新增」
        box-shadow: h-shadow v-shadow blur spread color inset;
          h-shadow 必须,水平阴影的大小,可以为负值
          v-shadow 必须,垂直阴影的大小,可以为负值
          blur     可选,模糊距离
          spread   可选,阴影尺寸
          color    可选,定义阴影的颜色
          outset/inset 可选,定义外/内部阴影(默认为outset外部阴影)
        可添加多个阴影,相互之间使用逗号隔开
          box-shadow: 10px 20px 3px 5px #6cd5b5 inset ,20px 30px 4px 8px #e9b0b0;
      overflow 溢出显示方式
        PS:规定当内容溢出元素框时发生的事情
          overflow-x 和 overflow-y 单独指定在水平或者垂直方向上的显示方式
        hidden   内容被修剪,且隐藏超出的内容
        scroll   出现水平与垂直的滚动条,超出的内容被滚动显示.
        auto     根据需要出现水平滚动或者是垂直滚动条,滚动显示超出的内容.
        visible  默认值,内容不会被修剪,会呈现在元素框之外。
    float    浮动
      PS:如最初的 float 只是用来实现文字环绕图片的效果.
        浮动元素垂直外边距不会合并.
      float
        left  左浮动
          该元素向左移动,直到接触到父元素的左b边界或上一个浮动元素为止
        right 右浮动
          使该元素向右移动,直到接触到其父元素的右边界或上一个浮动元素为止为止.
        none  无浮动
      浮动的特点
        元素左、右浮动,默认不会超出父元素的左、右边界 
          (可通过设置负margin超出)
        元素浮动后都变成 block,但不换行 可以自定义宽高,其默认宽高由内容决定 .
        浮动浮动元素的若干个兄弟元素,他们会一行排列,行末自动换行.
          新起行的起始高度由上一行最后一元素高度决定,从其高度向前滑动,卡住为止.
          可通过负margin将下一行的元素移到上一行,但会覆盖上一行的元素.
        浮动元素会脱离文档流,但非浮动元素仍会受到浮动元素的影响;
          PS:为表述方便定义浮动元素为 floatElem,用于说明的元素为 targeElem
          非浮动的父元素
          非浮动的兄弟元素
            targeElem及targeElem的block子元素位于floatElem下
            targeElem的文字等内容、行内后代元素都会被floatElem挤开,成'围绕'样式,
            即位于floatElem的右、下方.
          非浮动的子元素
          非浮动的非同分支元素:会将targeElem中的文字挤开,但不会'围绕'
            只会位于floatElem下方,而不会位于floatElem右边
            e.g.:
              <div class="container">
                <span class="part1">
                  我要这天,再遮不住我眼,  要这地,再埋不了我心,  要这众生,都明白我意,  要那诸佛,都烟消云散! 我要这天,再遮不住我眼,  要这地,再埋不了我心,  要这众生,都明白我意,  要那诸佛,都烟消云散! 我要这天,再遮不住我眼,  要这地,再埋不了我心,  要那诸佛,都烟消云散! 我要这天,再遮不住我眼,  要这地,再埋不了我心,  要这众生,都明白我意, 要这众生,都明白我意, 
                </span>
                <div class="middle">
                  <img class="float" src="http://pic6.huitu.com/res/20130116/84481_20130116142820494200_1.jpg" alt="">
                </div>
                <span class="part2">
                  要那诸佛,都烟消云散! 我要这天,再遮不住我眼,  要这地,再埋不了我心,  要这众生,都明白我意,  我要这天,再遮不住我眼,  要这地,再埋不了我心,  要这众生,都明白我意,  我要这天,再遮不住我眼,  要这地,再埋不了我心,  要这众生,都明白我意,  我要这天,再遮不住我眼,  要这地,再埋不了我心,  要这众生,都明白我意,  我要这天,再遮不住我眼,  要这地,再埋不了我心,  要这众生,都明白我意,  我要这天,再遮不住我眼,  要这地,再埋不了我心,  要这众生,都明白我意,  我要这天,再遮不住我眼,  要这地,再埋不了我心,  要这众生,都明白我意,  要那诸佛,都烟消云散! 我要这天,再遮不住我眼,  要这地,再埋不了我心,  要这众生,都明白我意,  要那诸佛,都烟消云散! 我要这天,再遮不住我眼,  要这地,再埋不了我心,  要这众生,都明白我意,  要那诸佛,都烟消云散!
                  123456789132456789
                </span>
              </div>
              .container{ background-color: #1dac24; }
              .middle{ display: inline-block; background-color: #8a7b72; }
              .float{
                float: left;
                width: 50px;
                background-color: #38b8e0;
                width: 55px; 
                height: 55px;
              }
      clear 不允许块元素的 左侧|右侧 出现浮动元素
        left/right/both/none
      浮动子元素不支撑父元素导致无高度的决解方法或清除浮动的方法:
        PS:子元素为浮动元素,则其父元素不会被支撑,浮动元素会溢出
          当父元素没有指定高度时,且其子元素有浮动,则该父父元素的高度不会自动增加.
        方法一:定义父元素的height
        方法二:在父元素内部的结尾处增加一个空块元素并将其浮动清除
          原理:让空元素新起一行,且其必定被父元素包含,所以会撑起父元素.
        方法三:父元素 overflow:auto/hidden; 浮动的子元素不会被隐藏,但是父元素高度会被支撑
        方法四:使用 :after 伪选择器来达到和方法二相同的效果
          父元素 :after{display:block; clear:both; content:""; } 
            会在父元素的内部尾部添加一个空的块元素,并清除浮动.
          父元素{zoom:1};可有可无,用于解决ie6,ie7浮动问题,触发IE hasLayout
        方法五:父元素也浮动
    position 定位
      PS: 除 static 外, 元素定位后会变成类似于 inline-block 元素
      static   默认值,无定位
        元素出现在正常的流中
        忽略 top, bottom, left, right 或者 z-index 声明
      relative 相对定位
        PS:相对自己原来的位置进行定位,其原占有的空间仍被保留,元素未脱离文档流.
          相当于transform的translate,元素只是在显示上进行了偏移 (SelfThink),
          其显示的优先级被提升,偏移时可能会遮盖其他元素(包括背景和内容)
        e.g. 
          ＃XXX{
            position:relative;
            left:40px;/*相对原来的位置向右移动40px,若需向左移动,则值是负数*/
            top:100px:/*相对原来的位置向下移动100px,若需向上移动则值是负数*/
          }
      absolute 绝对定位
        PS:元素脱离文档流,元素从原来的位置脱离并让出自己的空间(后面元素占用让出的位置)
          相对于和自己最接近的那个非标准流的祖先元素进行定位
          通常做法是给其父元素添加相对定位.如果不存在这样的父元素,则向上一级寻找,直到以body为参考.
          如果不想覆盖下层的元素,可以设置z-index值达到效果。
        clip 裁剪绝对定位元素 (可配合使用的属性)
          PS:clip定义一个剪裁矩形。
            对于一个绝对定位元素,在这个矩形内的内容才可见。
            出了这个剪裁区域的内容会根据 overflow 的值来处理。
            剪裁区域可能比元素的内容区大,也可能比内容区小。
          可能的值:
            rect(top, right, bottom, left)
            auto    默认值,不应用任何剪裁。
            inherit 规定应该从父元素继承 clip 属性的值。
          e.g.:
          img{position:absolute;clip:rect(0px 50px 200px 0px);}
      fixed    相对于浏览器窗口的定位.
        表现形式与absolute类似,其定位的参照为视窗本身 (不会随浏览器窗口的滚动条滚动而变化)
        脱离文档流,这与background-attachment:fixed属性功能相同
        默认处在视窗的左边中间位置
      inherit  继承父元素的定位属性.
      /*配合属性*/
      left/right/top/bottom  位置偏移
        PS: 定位的参考起点为相对定位的元素 (relative 为其自身位置 (Self))
        %     left/right 参照宽;top/bottom 参照高
          relative 若其父元素脱离文档流则参考自身的宽高,否则参考父元素的宽高 (SelfThink)
          absolute/fixed 参照其定位元素的宽高 (SelfThink)
        pixel 
        位置偏移 的特点:
          使用 位置偏移 可达到width和height的效果 (当定位元素未定义 width 和 height 时)
            e.g. 
              <div class="a"><div class="aa"></div></div>
              .a{ position: relative; background-color: blue; width: 500px; height: 500px; }
              .aa{ background: green; position: absolute; left: 100px; right:100px; top: 200px; bottom: 100px; }
          定义 位置偏移属性 导致尺寸冲突时
            left 和 top 优先级高于 right 和 bottom;
              如定义width后,同时定义left和right,则right属性不生效
              (比如:left + width + right 小于 定位参考元素的width时) 
            margin:auto; 调和尺寸冲突,使定位元素尽可能处于中间位置
              应用:使 left=right=top=bottom + margin:auto 达到居中的效果.
      z-index      设置元素的堆叠顺序 「无单位」
        PS:只有relative、absolute、fixed定位元素才有该属性
        auto    默认,堆叠顺序与父元素相等
        number  数值,设置元素的堆叠顺序,可为负,数值较大则处于上层显示
        inherit 规定应该从父元素继承的值
        覆盖关系
          同级元素: 
            未设置时,后面元素覆盖前面元素
            设置z-index值,值大者覆盖小者
          父子元素关系: 默认子元素在父元素上,其他情况如下:
            PS:设置z-index 和不设置,有区别
            当父元素设置z-index,但不为auto,则子元素z-index设置任意值始终在父元素上,
            若父元素不设置z-index或设置z-index为auto,子元素z-index为负,则子元素在父元素下
    vertical-align  定义行内元素或替换元素使其相对于所在行的基线的垂直对齐方式
      PS: 该部分讨论的行是指所有共行的行内元素共同组成的一个包含行,
        而非特指行内元素的父元素,即改变父元素的高度对定位无影响,
        但改变行高inline-height会有影响.
      属性值:
        比较时,可假想该行中存在一和行内元素并列的文本.
        ◆定义无文本内容的行内元素或替换元素和有文本内容的行内元素情况有不同,
          后续便于说明简称为无文本元素和有文本元素,
          对齐时有文本元素对齐的是其内容中文字的基线,无文本元素对齐的是其底边,
          后续默认基线为文字的基线或元素的底边.
          元素基线与行基线的关系
        baseline   默认,元素基线和所在行的基线对齐
        length     通过值(可正负)调整两基线的位置
          '0px'等同于'baseline'
        %          通过相对行的line-height的百分比值(可正负)调整两基线的位置
          0% 等同于 baseline 
        super      元素基线相对于行基线升高到上标位置
          规范并未定义元素升高的距离,对于不同的用户代理,这个距离可能有所不同,
          字体大小不会改变.
        sub        元素基线相对于行基线下降到下标位置
        ◆有无文本元素都表现同无文本元素
          元素上边、下边或中部与行上边、下边或中部(一般为基线上方0.5ex处)位置关系
        top      将元素顶端与行框的顶端对齐
        middle   将行内元素框的中点与父元素基线上方0.5ex处对齐
          此处,1ex相对与父元素的font-size定义,大多数用户代理的1ex为0.5em
        bottom   将元素底端与行框的底端对齐
        ◆有无文本元素都表现同有文本元素
          对齐时,比较的情况为假设当前行存在文字,和inline元素存在同样大小文字时,
          两个文字的顶部平齐或底部平齐,而产生的定位,
          故改变行文字的font-size会有影响,但改变inline元素的font-size无影响.
        text-top       将元素内文本(假设存在)的顶端与行文本(假设存在)的顶端对齐
        text-bottom    将元素内文本(假设存在)的底端与行文本(假设存在)的底端对齐
    vertical-align  定义display:table-cell元素(典型的就是td),决定其内容垂直位置
      baseline
      top
      middle
      bottom
  flex 布局   「CSS3+」 「IE10+」 
    PS:常规布局是基于块和内联流方向,而Flex布局是基于flex-flow流
    Flex布局产生的影响
      子元素的 float、clear、vertical-align 等属性将失效
      子元素变成类似inline-block的状态
    指定为Flex布局
      采用Flex布局的元素,称为Flex容器(flex container),简称"容器"。
      容器的所有子元素,称为Flex项目(flex item),简称"项目"。
      display:flex; 容器元素独占一行
      display:inline-flex; 容器元素类似于inline-block
    ◆flex容器 可用属性
    flex-flow       flex-direction & flex-wrap 简写方式
    flex-direction  水平或垂直排列及排列方向
      row             默认值,水平方向,从左向右排列
      row-reverse     水平方向,从右向左排列
      column          垂直方向,从上向下排列
      column-reverse  垂直方向,从下向上排列
    flex-wrap       是否及如何换行
      nowrap  默认值,不换行
      wrap    「一行放不下时」换行,后面的项目从下一行开始排列
      wrap-reverse  (一行放不下时)换行,后面的项目从上一行开始排列(初始行移到下面)
    align-content   垂直方向多行「水平排列换行的多行而非竖直排列多行」的对齐方式 
      如果项目只排一行,该属性不起作用。
      stretch       默认值,多个行占满父元素的高度.
      flex-start    多行向上堆积,第一行与父元素的顶部对齐.
      flex-end      多行向下堆积,最后一行与父元素的底部对齐
      center        多行向中间堆积,多行处于父元素的中间位置
      space-between 上下行与父元素的两端对齐,行之间的间隔平均分布。
      space-around  每行的上下间距都相等。所以,行之间的间隔比行与父元素上下边的间隔大一倍。
    justify-content 行内水平/垂直多行的对齐方式 「和 flex-direction 有关」 
      当flex-direction定义为列排列时,表示为垂直方向上的对齐方式
      flex-start    默认值,左对齐
      flex-end      右对齐
      center        居中
      space-between 两端对齐,项目之间的间隔都相等。
      space-around  每个项目两侧的间隔相等。
        即项目之间的间隔比项目与边框的间隔大一倍。
    align-items     行内竖直方向对齐方式
      stretch     默认值,如果项目未设置高度或设为auto,将占满整个容器的高度。
      flex-start  行内的元素上部对齐
      flex-end    行内的元素底部对齐
      center      行内的元素中部对齐
      baseline    后续项目的第一行文字的基线与第一个项目的第一行的文字的基线对齐。
    ◆flex项目 可用属性
    order 定义项目的排列顺序
      num  数值越小,排列越靠前,默认为0。
    flex:  flex-grow、flex-shrink和flex-basis的简写 (后两个属性可选)
      flex:0 1 auto; 默认值
      有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)
        建议优先使用这个属性,而不是单独写三个分离的属性,因为浏览器会推算相关值。
    flex-grow:num    项目宽度 (相对于其他项目进行对比)
      默认值为0,即如果存在剩余空间,也不放大
      如果一个项目的 flex-grow  属性为1,其他为默认0,则该项目自动占满剩余的.
      如果所有项目的 flex-grow 属性都为1,则它们将等分剩余空间,如果有的话
      如果一个项目的 flex-grow 属性为2,其他项目都为 1,
        则前者占据的剩余空间将比其他项多一倍。
    flex-shrink:num   定义了项目的缩小比例 
      如果所有项目的flex-shrink属性都为1,当空间不足时,都将等比例缩小
      默认为1,即如果空间不足,该项目将缩小。
      如果一个项目的flex-shrink属性为0,其他项目都为1,则空间不足时,前者不缩小。
      负值对该属性无效。
      Remarks: 
        bug: 使用 flex-shrink:0; 决解左右布局时,一边某一个宽度与其他不同
        .item{
          display: flex;
          align-items: center;
          margin: 15 *@wu 0 ;
          .left{
            width: 150 *@wu;
            height: 100 *@wu;
            overflow: hidden;
            position: relative;
            flex-shrink: 0;
            .background{
              width: 100%;
            }
            .view-num{
              position: absolute;
              top: 0;
              left: 0;
              height: 20 *@wu;
              background-color: rgba(34, 34, 34, 0.2);
              padding: 0 8 *@wu;
              font-size: 12 *@wu;
              color: #fff;
              display: flex;
              align-items: center;
              span{
                margin-left: 6 *@wu;
              }
            }
          }
          .right{
            margin-left: 15 *@wu;
            .name{
              max-height: 45 *@wu;
              font-size: 16 *@wu;
              color: #222;
              overflow: hidden;
            }
            .cost{
              margin-top: 7 *@wu;
              font-size: 14 *@wu;
              color: #999;
            }
          }
        }
    flex-basis:length|auto 定义了在分配多余空间之前,项目占据的水平方向的空间。
      浏览器根据这个属性,计算行内水平方向是否有多余空间.默认值为auto,即项目的本来大小。
      它可以设为跟width或height属性一样的值(比如350px),则项目将占据固定空间。
    align-self 允许单个项目与其他项目不一样的对齐方式,可覆盖align-items属性
       auto | flex-start | flex-end | center | baseline | stretch;
      默认值为auto,表示继承父元素的align-items属性,如果没有父元素,则等同于stretch。
      该属性可能取6个值,除了auto,其他都与align-items属性完全一致。
  column 多栏布局 「CSS3新增」 
    column-count  显示栏目数
      number 元素内容将被划分的列数
      auto   由其他属性决定列数,比如 "column-width"。
      兼容性写法:
        -webkit-column-count:num;
        -moz-column-count:num;
    column-width  栏宽度
      auto   由浏览器决定
      length 自定义宽度
    column-gap    栏间距
      length  自定义间距
      normal  规定列间间隔为一个常规的间隔。W3C 建议的值是 1em。
    column-rule   栏分割线 (简写样式)
      column-rule-width  宽度
        thin   纤细
        medium 中等
        thick  宽厚
        length 自定义
      column-rule-style  样式
        none | hidden | dotted | dashed | solid 
        double | groove |  ridge | inse | outset
      column-rule-color  颜色
  BFC
    块级元素: 使元素变成块级元素的display值有 block list-item table等
    BFC就是用来格式化块级盒子,同样管理inline类型的盒子还有IFC,以及其他的FC
    Formatting Context：指页面中的一个渲染区域,并且拥有一套渲染规则,
      他决定了其子元素如何定位,以及与其他元素的相互关系和作用。
    BFC,Block Formatting Context
      一独立的渲染区域,只有Block-level Box参与,
      其规定了内部的Block-level Box的布局,且不受该区域外的影响.
      布局规则:
        内部的Box会在垂直方向,一个接一个的放置
        同属于一个BFC的两相邻的box的margin会发生重叠
        每个元素的margin box的左边,与包含块的border box 的左边相接触(对于从左往右的格式化,否者相反)
        BFC的区域不会与float box重叠
        BFC就是页面上的一个隔离的独立容器,容器内的子元素不会影响到外面元素,反之亦然.
        计算BFC的高度时,浮动元素也参与计算
      生成BFC的元素
        float属性不为none
        overflow不为visible
        根元素
        position为absolute 或fixed
        display为inline-block table-cell table-caption flex inline-flex 
          display：table也认为可以生成BFC,原因在于Table会默认生成一个匿名的table-cell
    e.g.:
      使用BFC将浮动元素和block元素同行且不会影响到block元素(即浮动元素不会浮在block元素上)
      <div class="aoo"> 1111 </div>
      <div class="boo"> 222222 </div>
      .aoo{ float: left; background-color:#b9e4e7; margin-left: 55px; }
      .boo{ background-color:#65c5cc; height: 66px; overflow: hidden; }
      /*使用 overflow: hidden 生成 BFC*/
  优先级
    元素覆盖的优先级
      背景
        默认的后面的元素覆盖前面的元素,
        子元素覆盖父元素,
  已废弃
    弹性盒模型  display:box
      已被 display:flex 取代
      使元素宽度跟随浏览器窗口变化而变化,使盒子布局变成弹性盒子布局.
      存在兼容性问题需加上前缀 -webkit- 或 -moz-
        目前没有浏览器支持 box-flex 属性。
        Firefox 支持替代的 -moz-box-flex 属性。
        Safari、Opera 以及 Chrome 支持替代的 -webkit-box-flex 属性。    
      box-orient  元素的排列方向
        horizontal 在水平行中从左向右排列子元素
        vertical   从上向下垂直排列子元素
      box-pack    元素水平对齐方式
        start   左对齐
        center  居中对齐
        end     右对齐
        justify 元素间无缝隙
      box-align   元素垂直对齐方式
        start   顶部对齐
        center  居中对齐
        end     底部对齐
      box-flex           子元素宽度
        值为数值,不同子元素间通过该数值的比例来进行宽度分割.
      box-ordinal-group  子元素排列顺序
        属性值为非负数值,根据数值的大小决定子元素的排列顺序
CSS3  
  CSS版本说明
    CSS 分为不同等级,CSS1 现已废弃, CSS2.1 是推荐标准, 
    CSS3 分成多个小模块,正在标准化中。
  颜色模式新增 RGBA HSLA 
  text-shadow [见文本样式]
  background-size background-origin background-clip
  box-sizing box-shadow border-radius border-image (见盒模型)
  @media
  多栏布局
  ::selection 伪元素
  transition 过渡 (可实现动画)
  animation  自定义动画
  linear-gradient radial-gradient 线性/圆形渐变
--------------------------------------------------------------------------------
移动端
ios 微信 
  滚动不顺畅 
    解决办法: 添加属性  -webkit-overflow-scrolling: touch;
CSS样式说明 
  cursor: pointer;
    点击时会有蓝色背景一闪的效果,表示被点击了
font,字体  
  1. - 各个手机系统有自己的默认字体,且都不支持微软雅黑 「?」
  2. 如无特殊需求,手机端无需定义中文字体,使用系统默认
  3. 英文字体和数字字体可使用 Helvetica ,三种系统都支持
  任意浏览器的默认字体高都为16px;
  高清屏(Retina)中控制显示的最小物理单元包括4个基本像素点,
    在Retina中可使用 0.5px 显示更细的线 (有兼容性问题,safari中可显示,Chrome中仍显示为1px)
  可通过缩放达到 1/npx 的效果:伪元素+CSS3缩放
    通过CSS transform的scale定义,理论上可以达到任意的 1/npx ,
    实际的显示效果为,当达到最小的显示尺寸后,会将其颜色变浅来相应的表示.
size,尺寸  
  开发尺寸问题
    对于全平台的APP设计,我们通常以 Android 720*1280px 的标准来做设计方案,
    然而web app的开发中并不能直接用 720*1280px 这样的尺寸进行搭建。
    原因如下：
    设备像素和CSS像素一般使用px作为单位,
    并且在桌面浏览器的100%缩放情况下,css的1个像素往往都是对应着电脑屏幕的1个物理像素,
    这可能会造成我们的一个错觉,那就是css中的像素就是设备的物理像素。
    但实际情况却并非如此,css像素只是一个抽象的单位,
    在不同的设备或不同的环境中,css中的1px所代表的设备物理像素的长度是不同的。
    在为桌面浏览器设计的网页中,我们无需对这个斤斤计较,
    但在移动设备上,必须弄明白这点。即：
    css中的1px并不是总代表设备像素上的1px,尤其是在移动设备上。
    这也就是为什么不能直接拿720*1280px作为开发尺寸的原因！
    因为我们的720*1280是物理像素,而web app使用的是逻辑像素；
    因此,我们的设计尺寸 720*1280px 对应到开发中的代码尺寸应该为 340*640px ,
    对应的iPhone6 750*1334 的开发尺寸为 375*667px ,iPhone6p(1080*1920px)
  像素知识
    设备像素(device pixel) 物理概念,指的是设备中使用的物理像素(Physic pixel)。
      这个单位用px表示,它是一个[相对绝对单位]
      即在同样一个设备上,每1个设备像素所代表的物理长度(如英寸)是固定不变的(即设备像素的绝对性); 
      但在不同的设备之间,每1个设备像素所代表的物理长度(如英寸)是可以变化的(即设备像素的相对性);
      我们所说的设备分辨率的单位就是设备像素。
    设备分辨率 设备分辨率的单位就是设备像素(px)。
      在同一个手机或电脑设备上,它的设备像素是固定的,
      这是厂商在出厂时就设置好了的————即一个设备的分辨率是固定不变的。
      分辨率越大,css中1px代表的物理像素就会越多
    CSS像素(css pixel)
      设备像素和CSS像素一般使用px作为单位,
      在桌面浏览器的100%缩放情况下,css的1个像素往往都是对应着电脑屏幕的1个物理像素,
      这可能会造成我们的一个错觉,那就是css中的像素就是设备的物理像素。 
      但实际情况却并非如此,css像素只是一个抽象的单位,
      在不同的设备或不同的环境中,css中的1px所代表的设备物理像素的长度是不同的。 
    缩放
      现代浏览器中实现缩放的方式都是「拉伸」像素(即每CSS像素单位代表的长度发生变化,而像素总数字不变)
      如果将一个元素为128px的元素放大一倍,元素的宽度并没有从128px变到256px,
      事实上只是“实际像素”变为2倍大小(即256px),而形式上这个元素的宽度还是128px,
      尽管它已经占据了256个设备像素的空间。
      所以,我们可以得到如下结论：
      缩放会引起CSS像素的变化——即引起每1个CSS像素所代表的物理像素变化。
      例如,当用户把页面放大一倍,那么css中1px所代表的物理像素也会增加一倍；
      反之把页面缩小一倍,css中1px所代表的物理像素也会减少一倍。
    DPI&PPI
      DPI(dots per inch)为打印机每英寸可以喷的墨汁点数,用于印刷行业中度量空间点的密度
      PPI(pixels per inch)为屏幕每英寸的像素数量,
        即在一个对角线长度为1英寸的正方形内所拥有的像素数,
        用于度量计算机显示屏上像素的密度.
        ppi在120-160之间的手机被归为低密度手机,
        160-240被归为中密度,
        240-320被归为高密度,
        320以上被归为超高密度（Apple给了它一个高大上的名字——Retina） 
     目前PPI(主要是iOS)和DPI(比如在Android中)都会用在计算机显示设备的参数描述中,
       并且二者的意思是一样的,都是代表像屏幕素密度
    DPR 设备像素比(Device Pixel Ratio）
      在移动端浏览器中以及某些桌面浏览器中,window对象有一个devicePixelRatio属性,
      它的官方的定义为：设备物理像素和设备独立像素的比例,
      也就是 devicePixelRatio = 物理像素 / 独立像素。
    设备独立像素(Device independent Pixel) 也称为逻辑像素,简称dip。
      根据上述设备像素与CSS像素之间的关系、及DPR的官方定义,我们可以推断出：
      CSS像素 =设备独立像素 = 逻辑像素
      e.g.:
        在Retina屏的iphone上,devicePixelRatio的值为2,
        也就是说1个css像素相当于2个物理像素。
        但是要注意的是,devicePixelRatio 在不同的浏览器中还存在些许的兼容性问题
  Viewport
    PS:移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域,
      在具体一点,就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域,
      但viewport又不局限于浏览器可视区域的大小,
      它可能比浏览器的可视区域要大,也可能比浏览器的可视区域要小。
      在默认情况下,一般来讲,移动设备上的viewport都是要大于浏览器可视区域的,
      这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小,
      所以为了能在移动设备上正常显示那些传统的为桌面浏览器设计的网站,
      移动设备上的浏览器都会把自己默认的viewport设为980px或1024px
      （也可能是其它值,这个是由设备自己决定的）,
      但带来的后果就是浏览器会出现横向滚动条,
      因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。
    layout viewport(布局视口)
      PS:浏览器默认情况下把viewport设为一个较宽的值,比如980px,
        这样的话即使是那些为桌面设计的网站也能在移动浏览器上正常显示了
        layout viewport 的宽度是大于浏览器可视区域的宽度的
      通过document.documentElement.clientWidth和-Height可以获取layout viewport的尺寸 
      兼容性：这种获取方式在Android 和IPhone手机上完全支持。 
    visual viewport(可视视口)
      PS:浏览器可视区域的大小,是页面当前显示在屏幕上的部分。
      用户可以通过滚动来改变他所看到的页面的部分,或者通过缩放来改变visual viewport的大小。
        浏览器可视区域(visual viewport)的宽度小于等于layout viewport的宽度
      对于visual viewport,它是通过window.innerWidth/Height来进行度量的。
      很明显当用户缩小或者放大的时候,度量的尺寸会发生变化。 
      兼容性：IPhone上完全支持,在Android 2, Oprea mini 和 UC 8中无法正确获取。 
    ideal viewport(理想视口)
      ideal viewport并没有一个固定的尺寸,不同的设备拥有有不同的ideal viewport
      ideal viewport的宽度 = 屏幕的逻辑像素宽度
      e.g.:
        iphone5的ideal viewport宽度是320px,
          也就是说在iphone5中,css中的320px就代表iphone屏幕的宽度
        安卓设备比较复杂,有320px的,有360px的,有384px的等等
    meta标签控制viewport
      移动设备默认的viewport是layout viewport,
      在进行移动设备网站的开发时,我们需要的是ideal viewport.可使用meta标签来设置
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
        其中width为layout viewport的宽度,
      该标签的作用是让layout viewport的宽度等于设备的屏幕宽度,再等于ideal viewport的宽度
        width=device-width和initial-scale=1.0的功能基本一样,
        但 width=device-width在IPhone和IPad上存在兼容问题； 
        initial-scale=1.0在IE上存在兼容问题
      Remarks:
        如果不设置meta viewport标签,那么移动设备上浏览器默认的layout viewport宽度值为980px,1024px等这些,总之是大于屏幕宽度的（这里的宽度所用的单位px都是指css中的px,它跟代表实际屏幕物理像素的px不是一回事）。 如果不设置meta viewport标签,一个PC的页面在移动设备上会进行缩放并完整显示出来！
    滚动距离Scrolling offset
      visual viewport当前相对于layout viewport的位置。
      这是滚动距离,并且就像在桌面一样,它被存储在window.pageX/YOffset之中。
      完全支持iPhone,Android,Symbian,Iris,MicroB,Skyfire,Obigo。
      问题：Opera,Bolt,Firefox和NetFront一直返回0。
      Samsung WebKit只有当<meta viewport>被应用到页面上时候才返回正确的值。
      不支持IE,BlackBerry。IE把值存在document.documentElement.scrollLeft/Top之中。
    HTML尺寸
      document.documentElement.offsetWidth/Height 提供了以CSS像素为单位的<html>元素的整个尺寸。
      完全支持Opera,iPhone,Android,Symbian,Samsung,Iris,Bolt,Firefox,MicroB,Skyfire,BlackBerry,Obigo。
      问题：NetFront的值只在100%缩放比例的情况下才正确。
      IE中,document.body.clientWidth/Height中获取正确的值。
    媒体查询Media queries
      媒体查询和其在桌面环境上的工作方式一样。
      width/height使用layout　viewport做为参照物,并且以CSS像素进行度量,
      device-width/height使用设备屏幕,并且以设备像素进行度量。
        可使用<meta viewport>将width=device-width,从而不必使用device-width媒体查询
不支持 
  css 不支持 变量 计算
零碎点 
  display:flex 兼容性
    微信端flex支持良好,但试 UC 和 Android4.4 以下的系统表现欠佳.
    决解办法
      使用 display:flex; 时,加上 display:-webkit-box;
      使用 flex:1; 时加上
         -webkit-box-flex:1;
         -moz-box-flex:1;
          -ms-flex:1;
      使用 align-items:center; 时,加上 --webkit-box-align:center;
      使用 flex-direction:column; 时,加上
        -webkit-box-orient:vertical;
        -moz-box-orient:vertical;
        box-orient:vertical;
--------------------------------------------------------------------------------
新内容 「可能存在兼容性问题」
var() CSS变量
  PS:自定义,用来指定文档中的特定变量
  变量定义 
    语法是：--*,变量使用语法是：var(--*),其中*表示我们的变量名称。
    命名要求
      不能包含$,[,^,(,%等字符,但是可以是中文、日文或者韩文
      e.g.:
        :root { --1: #369; }
        body { background-color: var(--1); }
  
        body {
          --深蓝: #369;
          background-color: var(--深蓝);
        }
    定义和使用位置: 只能在声明块{}里面
    优先级及使用范围
      PS:如果变量所在的选择器和使用变量的元素没有交集,是没有效果的,
        如 #alert 定义的变量,只有id为alert的元素才能享有。
        若要在变量全局使用,则你可以设置在:root选择器上；
        当存在多个同样名称的变量时候,变量的覆盖规则由CSS选择器的权重决定的,
        但并无!important这种用法,因为没有必要,!important设计初衷是干掉JS的style设置;
      :root { --color: purple; }
      div { --color: green; }
      #alert { --color: red; }
      * { color: var(--color); }
      
      <p>我的紫色继承于根元素</p>
      <div>我的绿色来自直接设置</div>
      <div id='alert'>
        ID选择器权重更高,因此阿拉是红色！
        <p>我也是红色,占了继承的光</p>
      </div>
    属性名不可以使用变量
      错误演示:
      body {
        --bc: background-color;     
        var(--bc): #369;           
      }
  变量使用 
    var( 自定义属性名 [, 默认值 ] ) 
      若使用的变量未定义「仅限于没有定义」,则使用后面的值作为元素的属性值
      .box { --1: #369; }
      body { background-color: var(--1, #cd0000); }
      则此时的背景色是#cd0000：
    变量不合法时使用缺省特性
      PS:对于CSS变量,只要语法是正确的,就算变量形式不正确,也是会作为正常的声明解析,
        但执行时发现变量值不合法,这是用该属性的默认值
      body {
        --color: 20px;
        background-color: #369;
        background-color: var(--color, #cd0000);
      }
      上面CSS等同于：
      body {
        --color: 20px;
        background-color: #369;
        background-color: transparent;
      }
    变量空格尾随特性
      body {
        --size: 20;   
        font-size: var(--size)px;
      }
      实际上,此处font-size:var(--size)px 等同于 font-size:20 px,
    变量的相互传递特性
      在CSS变量定义的时候可以直接引入其他变量给自己使用
      body {
        --green: #4CAF50;   
        --backgroundColor: var(--green);
      }
      
      或者更复杂的使用CSS3 calc()计算,例如：
      body {
        --columns: 4;
        --margins: calc(24px / var(--columns));
      }
  e.g. 
    element{ --main-bg-color:brown; }                 // 声明一个变量
    element{ background-color:var(--main-bg-color); } // 使用变量
--------------------------------------------------------------------------------
相关内容           
  css sprite 也叫雪碧图
    PS:一种网页图片应用处理方式。
      允许将一个页面涉及到的所有零星图片都包含到一张大图中去,
      载入的图片就不会像以前那样一幅一幅地慢慢显示出来了。
    CSS Sprites原理
      加速的关键,不是降低质量,而是减少个数。
      客户端每显示一张图片都会向服务器发送请求。
      所以,图片越多请求次数越多,造成延迟的可能性也就越大。
      CSS Sprites其实就是把网页中一些背景图片整合到一张图片文件中,
      再利用CSS的“background-image”,“background- repeat”,“background-position”的组合进行背景定位,
      background-position可以用数字精确的定位出背景图片的位置。
    优点
      1.利用CSS Sprites能很好地减少网页的http请求,从而大大的提高页面的性能,这也是CSS Sprites最大的优点
      2.CSS Sprites能减少图片的字节,曾经比较过多次3张图片合并成1张图片的字节总是小于这3张图片的字节总和。
      3.解决了图片命名的困扰,只需对一张集合的图片命名即可,不需要对每一个小元素命名,从而提高了网页的制作效率。
      4.更换风格方便,只需要在一张或少张图片上修改图片的颜色或样式,整个网页的风格就可以改变。维护起来更加方便。
    缺点
      1.在图片合并的时候,你要把多张图片有序的合理的合并成一张图片,还要留好足够的空间,防止板块内出现不必要的背景；这些还好,最痛苦的是在宽屏,高分辨率的屏幕下的自适应页面,你的图片如果不够宽,很容易出现背景断裂；
      2.CSS Sprites在开发的时候比较麻烦,你要通过photoshop或其他工具测量计算每一个背景单元的精确位置,这是针线活,没什么难度,但是很繁琐；幸好腾讯的鬼哥用ADOBE AIR开发了一个CSS Sprites 样式生成工具,虽然还有一些使用上的不灵活,但是已经比photoshop测量来的方便多了,而且样式直接生成,复制,拷贝就OK！
      3.CSS Sprites在维护的时候比较麻烦,如果页面背景有少许改动,一般就要改这张合并的图片,无需改的地方最好不要动,这样避免改动更多的css,如果在原来的地方放不下,又只能(最好)往下加图片,这样图片的字节就增加了,还要改动css。
      4.CSS Sprites非常值得学习和应用,特别是页面有一堆icon(图标)。总之很多时候大家要权衡一下利弊,再决定是不是应用CSS Sprites。

  css框架 
    Pure 
      网址:purecss.io
    Font Awesome
      引入链接 <link rel="stylesheet" href="http://fontawesome.io/assets/font-awesome/css/font-awesome.css">
    animate.css 动画库

  计算 clac (详见: 样式 尺寸)

  CSS 变量
    /*定义变量*/
    :root{ --color:blue; }
    /*使用变量*/
    div{
      background-color: var(--color);
    }
技术实现 综合运用   
  小技巧
    消除标签中的空格
      设置  font-size:0;
      
    网页布局 查看 分析
      在调试框中输入一下代码即可
        document.querySelector("head").insertAdjacentHTML("afterbegin",
        '<style> *{ outline: dashed 1px red; } </style>' )

  水平居中方法汇总
    margin:0 auto; 定义block子元素使其水平居中
    text-align:center; 定义其父元素使其inline、inline-block子元素或文字等水平居中
      text-align属性具有继承性
    偏移补偿法居中
      原理原理:
        子元素偏移父元素width的50%,此时子元素的左边界处于父元素的中间位置,
        再偏移子元素的-50%,则子元素的中心处于父元素的父元素的中心.
      margin + float
        PS:使用float的目的:当浮动非替换元素且未定义宽度时,则其width自动缩到最小.
        <div class="a">
          <div class="b">
            123
          </div>
        </div>
        .a{
          float: left;
          /*使 a 和 b 宽度相等*/
          margin-left: 50%;
          /*参考其父元素*/
        }
        .b{
          margin-left: -50%;
          /*参考其父元素*/
        }
      margin + inline-block
        使用display:inline-block属性替换float未定义宽度的非替换元素的特性.
      margin + transform:translateX(-50%)
        transform:translateX(-50%) 百分比以自身为参考
      定位left:50% + 父元素width=子元素width.
        使用定位的left偏移代替margin-left,
        然后在使用前面两种使父子宽度相等的方法达到水平居中
      定位left:50％ + float
        父元素设置float,给父元素设置定位和left:50％,
        子元素设置相对于父元素定位和left:-50％来实现水平居中.
        <div class="container">
            <ul>
                <li><a href="#">1</a></li>
                <li><a href="#">2</a></li>
                <li><a href="#">3</a></li>
            </ul>
        </div>
        .container{
            float:left;
            position:relative;
            left:50％;
         }
        .container ul{
            list-style:none;
            margin:0;
            padding:0;
            position:relative;
            left:-50％;
         }
        .container li{
            float:left;
            display:inline;
            margin-right:8px;
         }
      relative + float
        <div class="box">
         <p>我是浮动的111111111111111111111111111111111</p>
        </div>
        .box{
         margin-left: 50%;
         float:left;
        }
        p{
         position:relative;
         right:50%;
        }
      ...
  垂直居中方法控制
    ◆line-height 与 vertical-align
    line-height = height 垂直居中单行文字
      设置行高等于父元素高度,或者直接设置line-height来确定高度
      行高具有继承性
    line-height = height ; + vertical-align:middle 垂直居中行内元素
      父元素的line-height和其height相等,子元素使用vertical-aligh:middle;使子元素居中
    vertical-align:middle + 辅助子元素
      父子元素搭配使其其他子元素垂直居中;
      e.g.:
        在父元素中,借助一高度等于父元素的子元素a定义其vertical-align:middle,
        其他的子元素定义vertical-align:middle,则都相对于a元素居中(处于a元素中部)
        <div id="wrapper">
          我是wrapper1
          <div id="content">
            Content的第1行<br />
            Content的第2行<br />
            Content的第3行<br />
            Content的第4行<br />
            Content的第5行
          </div>
          我是wrapper2
          <div id="actor">我是演员</div>
          我是wrapper3
        </div>
        #wrapper{ height:500px; border:solid 1px red; }
        #content{
          display: inline-block;
          vertical-align: middle;
          height:150px;
          border:solid 1px red;
        }
        #actor{
          display: inline-block;
          vertical-align: middle;
          height: 400px;
          border:solid 1px red;
        }
    vertical-align:middle + table-cell元素
      使用插入 table (包括tbody、tr、td)标签嵌套.
        定义父元素属性:display:table;
        子元素属性:display: table-cell;vertical-align: middle;
        css中有一个用于竖直居中的属性vertical-align,
        在父元素设置此样式时,会对inline-block类型的子元素都有用.
        PS:子元素会占满父元素;
      设置块元素的display:table-cell,vertical-align:middle.
        注:该方法兼容性有问题,IE6、7并不支持该样式
    ◆定位法
    position + margin:auto
      父元素relative定位,子元素left=right,top=bottom,margin:auto;
    position + margin    百分比偏移
      e.g.:
        #parent {position: relative;}
        #child {
          position: absolute;
          top: 50%; left: 50%;
          width: 50%;          /*通过宽度将偏移和外边距联系起来*/
          margin: -15% 0 0 -25%;
        }
    position + transform 偏移
      position:absolute
      top:50%;left:50%;
      transform:translate(50%,50%)
    ◆其他
    父元素height不可固定 + padding填充
      父元素设置属性padding:X1 X2;(X1表示上下,X2表示左右)
      e.g. :
      <div class="p"> <div class="c"> </div> </div>
      .p{ padding: 40px 0; background-color: #ca9acb; }
      .c{ width: 60px; height: 60px; background-color: #dd90a4; }
    display:flex [详参css布局篇]
  水平垂直居中方法
    ◆定位法
    position + 负margin偏移 (见垂直居中方法)
    position + transform: translate(-50%, -50%); (参见垂直居中方法)
    position + margin:auto  (详参垂直居中方法)
    ◆其他方法
    display:table-cell + text-align + vertical-align 
    calc
    flex

  固定长宽比缩放
    方法一:使用vw等单位,将width和height设置成需要的比例即可.
    方法二:使用padding属性的百分比数参照对象为其父元素宽度.
      <div class="container">
        <div class="wrapper">
          <div class="content"> 1 </div>
        </div>
      </div>
      .container{
        width:100%;/*max-width:800px;min-width:320px;*/
        background-color:pink;
      }
      .wrapper{
        padding-top:150%;          /*将高度设置为宽度的1.5倍*/
        position:relative;        /*为content使用绝对定位*/
        background-color:yellow;
      }
      .content{
        width:100%;height:100%;   /*继承其父元素的宽高*/
        position:absolute;        /*使用绝对定位和父元素位置重合*/
        left:0;top:0;
        background-color:blue;
      }

  特殊用法(至少对于自己来说)
    多个浮动元素情况下,且有浮动元素被挤到下一行,将下一行的浮动元素移动到当前行.
      <div>123</div>
      <p>abc</p>
      div{
      width:100%;height:66px;
      background-color:#ccc;
      float:left;
      }
      p{
      width:99px;height:88px;
      background-color:#123456;
      float:left;
      margin-left:-50%;
      }
      
  CSS创建三角形
    原理:四条边框边框并无重叠的部分
    div{
      width: 0;
      height: 0;
      border: solid 20px;
      border-color: transparent transparent red transparent;
      /*上、左、右三条边隐藏(颜色设为 transparent透明)*/
    }
    
  CSS优化、提高性能的方法有哪些？
    关键选择器(key selector)。选择器的最后面的部分为关键选择器(即用来匹配目标元素的部分)；
    如果规则拥有 ID 选择器作为其关键选择器,则不要为规则增加标签。
    过滤掉无关的规则(这样样式系统就不会浪费时间去匹配它们了)；
    提取项目的通用公有样式,增强可复用性,按模块编写组件；增强项目的协同开发性、可维护性和可扩展性;
    使用预处理工具或构建工具(gulp对css进行语法检查、自动补前缀、打包压缩、自动优雅降级)；
    
  vertical-align 和 text-align
    display：table-cell 的父元素内,子元素 指定 vertical-align 对 自己 产生 垂直对齐的作用
    父元素 指定 text-align样式 对 display：inline 和 display：inline-block的子元素 产生 水平对齐的作用
    
  隐性改变display类型
    当元素(不论之前是什么类型元素,display:none除外)设置以下2句之一:
    ⒈position:absolute:
    ⒉float:left/right
    自我总结:
      设置该两种样式,都会脱离文档流,
      导致元素的display显示类型就会自动变为以display:inline-block(块状元素)的方式显示,
      当然可以设置元素的width和height了,且默认宽度不占满父元素.
      
  两个同级盒子,一个固``定尺寸另一个占满剩余空间 (分别就水平 和 垂直方向排列来讨论)
    水平排列时
      方法一:使用 position 的 left、right定位属性
      方法二:使用margin
        .left{
          float:left;
          width:200px;
        }
        .right{
          margin-left: 200px;
        }
      方法三:利用 BFC
        .left{
          float:left;
          width:200px;
        }
        .right{
          overflow:hidden;
        }
        右边盒子触发bfc,使其不与浮动盒子区域重叠,因此会重新计算宽度。
      方法四:使用 flex
      方法五:使用 CSS的计算功能 clac()
    垂直排列时
      垂直相对与水平,增加了难度,上述方法中只有一、五可用
        (原因:block元素默认width为父元素的100%,而高度中无该属性.)
      使用 box-sizing:border-box; 属性;
        高度设置为100%,margin-top 为负值和固定高度的兄弟盒子重叠一部分.
        再使用 padding-top 值等于 margin-top 将其内容不与兄弟盒子重叠;

  元素固定宽高比、尺寸自适应的方法
    方法一:父元素使用padding来确定高度 (padding的百分比参考其父元素的宽度) 
      父元素相对或绝对定位,子元素相对于父元素绝对定位脱离文档流 (使子元素不占用父元素的空间)
    方法二:使用单位vw
      统一使用vw作为尺寸单位,或设置rem等于1vw,使用rem作为单位
  文本超出显示为省略号 [见 text-overflow 属性]
Question & Idea:  
  左右两个元素,右元素左浮动,如何使左元素不被挤走?
Collection        
  垂直外边距合并的坑. (已决解,参见margin)
    .a{
      width: 700px;
      height: 100px;
      outline:dashed 1px red;
      margin-top: 0;
      padding-top: 0px;  
      /*此处将 padding-top: 0px;  改为 1px 看变化*/
    }
    .b{
      width: 300px;
      height: 300px;
      outline:dashed 1px red;
      margin-left: 40%;
      margin-top: 40%;
    }
    <div class="a">
      <div class="b">1</div>
    </div>
    
  Chrome不支持小于12px的文字,如何决解?
    用图片：如果是内容固定不变情况下,使用将小于12px文字内容切出做图片
    
  position:fixed;在android下'无效'的处理
    fixed的元素是相对整个页面固定位置的,在屏幕上滑动只是在移动这个所谓的viewport,
    原来的网页还好好的在那,fixed的内容也没有变过位置,
    所以说并不是iOS不支持fixed,只是fixed的元素不是相对手机屏幕固定的。
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no"/>
    
  css中插入文件 url(文件地址)
    e.g. 
    div:before{
      content:url(logo.png);
    }
    
  最值得看的三本书籍
    CSS权威指南、精通CSS、CSS Secrets
习题及精解
--------------------------------------------------------------------以下待整理 
  z-index
    子元素要比父元素高 (?)
    父元素是z-index 999
    那么子元素设置为1,也比父元素高


  像素
    Device Pixels(设备像素) 一个设备像素（或者称为物理像素）是显示器上最小的物理显示单元。
    在操作系统的调度下,每一个设备像素都有自己的颜色值和亮度值。
    苹果公司为它的双倍屏幕密度的显示器（double-density displays）创造了一个新词“Retina”,
    声称在正常的观看距离下,人眼无法在Retina显示器上分辨出单独的像素。
    CSS pixel是浏览器使用的抽象单位,用来精确的、统一的绘制网页内容。
    通常,CSS pixels被称为与设备无关的像素（DIPs,device-independent pixels）。
    在标准密度显示器（standard-density displays）上,1 CSS pixel对应一个物理像素。
    物理像素与CSS pixel 的比率可以通过媒体查询的device-pixel-ratio来检测（device-pixel-ratio兼容性）。
    也可以通过javascript的window.devicePixelRatio来获取该比率。
    Bitmap Pixels（位图像素） 一个位图像素是栅格图像（也就是位图,png、jpg、gif等等）最小的数据单元。
    每一个位图像素都包含着该如何显示自己的信息,例如显示位置、颜色值等。
    一些图片格式还包含额外的数据,例如透明度。
    除了自身的分辨率外,图片在网页上还有一个抽象的尺寸,通过CSS pixels来定义。
    浏览器在渲染的过程中,会根据图片的CSS高度和宽度来压缩或是拉伸图片。
    当一个位图以原尺寸展示在标准密度显示器上时,一位图像素对应一个物理像素,就是无失真显示。
    而在Retina显示器上,为了保证同样的物理尺寸,需要用四倍的像素来展示,
    但由于单个位图像素已经无法再进一步分割,只能就近取色,导致图片变虚。
    像素密度可以通过javascript的window.devicePixelRatio来查询(注意：不是所有浏览器都支持devicePixelRatio)。一旦检测到高密度显示器,你就可以用高质量图片替换普通图片：

  vmin and vmax
    vmin 和 vmax关于视口高度和宽度两者的最小或者最大值。
    比如,浏览器的宽度设置为1100px,高度设置为700px, 1vmin = 1px, 1vmax = 11px。
    如果宽度设置为800px,高度设置为1080px, 1vmin=8px, 1vmax=10.8px。
  ex and ch
    ex 和 ch 单位,类似于 em 和 rem, 依赖于当前的字体和字体大小。
     但是,不同的是,这两货是基于字体的度量单位,依赖于设定的字体。
    ch 单位通常被定义为数字0的宽度。
    你可以在Eric Meyers的博客里找到关于它的一些有意思的讨论,
    例如将一个等宽字体的字母”N”的宽度设置为40ch,
    那么在另一种类型的字体里它却可以包含40个字母。
    这个单位的传统用途主要是盲文的排版,但是除此之外,肯定还有可以应用他的地方。
    ex 定义为当前字体的小写x字母的高度或者 1/2 的 1em。 
    很多时候,它是字体的中间标志。
    这些单位有很多用途,大部分用于版式的微调。比方说,sup 元素（上角文字标）,可以通过position:relative;bottom: 1ex;实现 。类似的方法,你可以实现一个下角文字标。浏览器默认的方式是利用
    上标和下标特定垂直对齐规则,但是如果你想更细粒度更精确得控制,你可以像下面这样做：
    sup {
      position: relative;
      bottom: 1ex;
    }
    sub {
      position: relative;
      bottom: -1ex;
    }
    sup {
      position: relative;
      bottom: 1ex;
    }
    sub {
      position: relative;
      bottom: -1ex;
    }
    
  .pay{
    position: fixed;
    bottom: 0; left: 0;
    width: 100%;
    .title{
      height: 50*@wu;
      line-height: 50*@wu;
      color: #999;
      background-color: #F4F4F4;
      .cancel-btn{
        float:left;
        margin-left: 10vw;
        /**此处导致title-txt 不能居中/
      }
      .title-txt{
        font-size: 18*@wu;
        text-align: center;
        width: 100%;
      }
    }
  }
  
  flex 布局如何指定单一一元素在水平方向上的对齐方式





  在文字超出部分部分使用...显示


 





