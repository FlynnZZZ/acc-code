Cocos Creator 
介绍 
  一个完整的游戏开发解决方案,包括了 cocos2d-x 引擎的 JavaScript 实现,
  以及更快速开发游戏所需要的各种图形界面工具;
  包含游戏引擎、资源管理、场景编辑、游戏预览和发布等游戏开发所需的全套功能,
  并且将所有的功能和工具链都整合在了一个统一的应用程序里;
  目前支持发布游戏到Web、Android和iOS,以及点开即玩原生性能的Cocos Play手机页游平台;
  以数据驱动和组件化作为核心的游戏开发方式
  场景中的内容按照工作流分别呈现在 资源管理器、层级管理器、场景编辑器、属性检查器 四个核心面板中
说明
  默认单位 
    时间 s,秒
    尺寸 px,像素
  项目结构
    通过 Dashboard,创建项目之后,有特定的文件夹结构;
    初次创建并打开一个 Cocos Creator 项目后,您的项目文件夹将会包括以下结构：
    ProjectName（项目文件夹）
    ├──assets
    ├──library
    ├──local
    ├──settings
    ├──temp
    └──project.json
    assets,资源文件夹
      assets 将会用来放置您游戏中所有本地资源、脚本和第三方库文件。
      只有在 assets 目录下的内容才能显示在 资源管理器 中。
      assets 中的每个文件在导入项目后都会生成一个相同名字的 .meta 文件,
      用于存储该文件作为资源导入后的信息和与其他资源的关联。
      一些第三方工具生成的工程或设计原文件, 如 Photoshop 的 .psd 文件,
      可以选择放在 assets 外面来管理。
    library,资源库
      library 是将 assets 中的资源导入后生成的,
      在这里文件的结构和资源的格式将被处理成最终游戏发布时需要的形式。
      如果您使用版本控制系统管理您的项目,这个文件夹是不需要进入版本控制的。
      当 library 丢失或损坏的时候,只要删除整个 library 文件夹再打开项目,就会重新生成资源库。
    local,本地设置
      local 文件夹中包含该项目的本地设置,包括编辑器面板布局,窗口大小,位置等信息。
      您不需要关心这里的内容,只要按照您的习惯设置编辑器布局,这些就会自动保存在这个文件夹。
      一般 local 也不需要进入版本控制。
    settings,项目设置
      settings 里保存项目相关的设置,如 构建发布 菜单里的包名、场景和平台选择等。
      这些设置需要和项目一起进行版本控制。
    project.json
      project.json 文件和 assets 文件夹一起,作为验证 Cocos Creator 项目合法性的标志。
      只有包括了这两个内容的文件夹才能作为 Cocos Creator 项目打开。
      而 project.json 本身目前只用来规定当前使用的引擎类型和插件存储位置,不需要用户关心其内容。
这个文件也应该纳入版本控制。
--------------------------------------------------------------------------------
菜单栏
工具栏 
  PS：包括了场景编辑工具和预览游戏时的操作按钮,
    最右边显示了远程测试和调试时使用访问地址,以及连接中的设备数。
  矩形变换工具: 鼠标拖动缩放选中的对象
资源管理器 
  PS： 显示了项目资源文件夹「assets」中的所有资源
    项目中 assets 目录下的资源才会被 Cocos Creator 导入项目并进行管理;
    图片文件导入项目后会经过简单的处理成为texture类型的资源,
    之后就可以将这些资源拖拽到场景或组件属性中去使用了;
  Scene,游戏场景
    PS： Scene是开发时组织游戏内容的中心,也是呈现给玩家所有游戏内容的载体。
      Scene中一般会包括以下内容：
      Sprite场景图像和Label文字、 角色、以组件形式附加在场景节点上的游戏逻辑脚本
      当玩家运行游戏时,就会载入Scene,Scene加载后就会自动运行所包含组件的游戏脚本,
      实现各种各样开发者设置的逻辑功能。
      所以除了资源以外,Scene是一切内容创作的基础;
    创建Scene
      1、在资源管理器中点击选中assets目录「确保场景会被创建在assets目录下」
      2、点击资源管理器左上角的加号按钮,在弹出的菜单中选择Scene
      3、选择新创建的Scene,右键重命名
      4、双击Scene,在场景编辑器和层级编辑器中打开该场景
    Canvas
      Scene就是以Canvas为基础支持的;
      Canvas可以被称为画布节点或渲染根节点,场景图像都会放在Canvas节点下
  创建添加脚本 
    通常在assets下创建一个script文件夹来存放JS脚本
    脚本名称就是组件的名称,且大小写敏感
    
    编写脚本 
      打开的脚本里已经有了预先设置好的一些代码块,这些代码就是编写一个组件脚本所需的结构。
      具有这样结构的脚本就是 Cocos Creator 中的组件（Component）,
      他们能够挂载到场景中的节点上,提供控制节点的各种功能。
        properties: {
            // 主角跳跃高度
            jumpHeight: 0,
            // 主角跳跃持续时间
            jumpDuration: 0,
            // 最大移动速度
            maxMoveSpeed: 0,
            // 加速度
            accel: 0,
        },
        代码中不需关心这些数值是多少,因为之后会直接在属性检查器中设置这些数值,
    把脚本组件添加到需要控制的节点上 
      在 层级编辑器 中选中对应的节点,然后在 属性检查器 中点击 添加组件 按钮,
      选择 添加用户脚本组件 对应的JS脚本,为节点添加 JS脚本组件。    
  Prefab 预制资源 
    创建预制
      在场景中编辑好节点后,直接将节点从 层级管理器 拖到 资源管理器,即可创建出一个预制
    保存预制
      在场景中修改了预制实例后,在 属性检查器 中直接点击 保存,即可保存对应的预制资源：
    还原预制
      在场景中修改了预制实例后,在 属性检查器 中直接点击 回退,即可将预制对象还原为资源中的状态：
    自动同步和手动同步
      每个场景中的预制实例都可以选择要自动同步和还是手动同步。
      设为手动同步时,当预制对应的原始资源被修改后,场景中的预制实例不会同步刷新,
      只有在用户手动还原预制时才会刷新。
      设为自动同步时,该预制实例会自动和原始资源保持同步。
      注意,为了保持引擎的精简,自动同步的预制实例有如下限制：
      
      场景中的预制实例仅能修改预制的根节点自身的 name、active、position 和 rotation 属性,
      其它子节点和所有组件都必须和原始资源保持一致,否则编辑器会询问是要撤销修改还是要更新原始资源。
      自动同步的预制中的组件无法引用该预制外的其它对象,否则编辑器会弹出提示。
      自动同步的预制外面的组件只能引用该预制的根节点,无法引用组件和子节点,否则编辑器会弹出提示。
      这些限制都仅影响编辑器操作,运行时不影响。
    将预制还原成普通节点
      从 资源管理器 中删除一个预制资源后,你可以将场景中对应的预制实例还原成普通节点。
      方法是选中预制实例,然后点击菜单 节点 > 还原成普通节点。      
场景编辑器 
  PS：场景编辑器是用来展示和编辑场景中可视内容的工作区域。
    所见即所得的场景搭建工作都依靠场景编辑器中的显示来完成。
层级管理器 
  层级管理器用树状列表的形式展示场景中的所有节点和他们的层级关系,
  所有在场景编辑器中看到的内容都可以在层级管理器中找到对应的节点条目,
  在编辑场景时这两个面板的内容会同步显示,一般我们也会同时使用这两个面板来搭建场景。
  可直接将资源管理器中的图像拖动到层级管理器上,
  使用拖拽资源的方式添加节点时,节点会自动以贴图资源的文件名来命名;
  同级后面的节点的渲染顺序会在前面节点的后面「显示在上层」,
  另外子节点也会永远显示在父节点上层,
  可以随时调整节点的层级顺序和关系来控制他们的显示顺序;
属性检查器 
  PS：属性检查器是我们查看并编辑当前选中节点和组件属性的工作区域,
    这个面板会以最适合的形式展示和编辑来自脚本定义的属性数据。
  Design Resolution 规定了游戏的设计分辨率
  Fit Height和Fit Width规定了在不同尺寸的屏幕上运行时,将如何缩放节点以适配不同的分辨率
  Node 节点属性
    Anchor,锚  任何节点的锚点默认在节点的中心,即该节点中心点位置就是该节点的位置
      可通过鼠标或改变Anchor的X、Y值来改变其位置
控件库
  PS：预设控件的仓库库,可以通过拖拽方式添加到场景中,
    并且可以将用户自己的预制资源（prefab）添加到控件库里方便再次使用。
--------------------------------------------------------------------------------
UI 
  Sprite 精灵图
  Label 文字节点
  Widget 对齐挂件,实现多分辨率自适应排版
  Layout 自动布局
  ScrollView 滚动视图
  Prefab 复用列表内容
--------------------------------------------------------------------------------
Cocos2d-js API
















