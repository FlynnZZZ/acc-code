# js .js 对象及其属性方法--------------------------------------------------------
'.source.js':
  # obj ------------------------------------------------
  '-obj .__proto__':
    'prefix': 'proto1' # 存在bug
    'body': '__proto__'
  '-obj .constructor':
    'prefix': 'constructor1' # 存在bug,当为 'prefix': 'constructor' 时
    'body': 'constructor'
  '-obj .valueOf()':
    'prefix': 'valueOf'
    'body': 'valueOf()'
  '-obj .toString()':
    'prefix': 'toString'
    'body': 'toString()'
  '-obj .toLocaleString()':
    'prefix': 'toLocaleString'
    'body': 'toLocaleString()'
  '-obj .hasOwnProperty(key)':
    'prefix': 'hasOwnProperty1' # 存在bug 
    'body': 'hasOwnProperty($1)'
  '-obj .propertyIsEnumerable(key)':
    'prefix': 'propertyIsEnumerable'
    'body': 'propertyIsEnumerable($1)'
  '-obj .isPrototypeOf(obj)':
    'prefix': 'isPrototypeOf'
    'body': 'isPrototypeOf($1)'
  '-obj .apply(this[,arrays])':
    'prefix': 'apply'
    'body': 'apply(${1:this},${2:arrays})'
  '-obj .bind(this[,arg1,arg2,...])':
    'prefix': 'bind'
    'body': 'bind(${1:this},${2:arg1,arg2,..})'
  '-obj .call(this[,arg1,arg2,...])':
    'prefix': 'call'
    'body': """call(${1:this},${2:arg1,arg2,..})"""
  '-obj Object.create(protoObj[,configObj])':
    'prefix': 'Object-create'
    'body': 'Object.create($1)'
  '-obj Object.is(val1,val2)':
    'prefix': 'Object-is'
    'body': 'Object.is($1)'
  '-obj Object.keys(obj)':
    'prefix': 'Object-keys'
    'body': 'Object.keys($1)'
  '-obj Object.assign(obj1,obj2,..)':
    'prefix': 'Object-assign'
    'body': 'Object.assign($1)'
  '-obj Object.getPrototypeOf(obj)':
    'prefix': 'Object-getPrototypeOf'
    'body': 'Object.getPrototypeOf($1)'
  '-obj Object.defineProperty(obj,key,configObj)':
    'prefix': 'Object-defineProperty'
    'body': '''Object.defineProperty(${1:obj},key,{
        // get : function (){
        // },
        // set : function (){
        // },
        value : val,
        writable : bool,
        enumerable : bool, 
        configurable : bool
      })'''
  '-obj Object.defineProperties(obj,configObj)':
    'prefix': 'Object-defineProperties'
    'body': '''Object.defineProperties(${1:obj},{
        aoo: {
          value: 101,
          writable: true,
          enumerable: true,
          configurable: true
        },
        boo: {
          set: function(newVal) {
            // this.xx = newVal
          },
          get: function() {
            // return this.xx
          },
          enumerable: true,
          configurable: true
        }
      })'''
  '-obj Object.getOwnPropertyDescriptor(obj,key)':
    'prefix': 'Object-getOwnPropertyDescriptor'
    'body': 'Object.getOwnPropertyDescriptor($1)'
  '-obj Object.getOwnPropertyNames()':
    'prefix': 'Object-getOwnPropertyNames'
    'body': 'Object.getOwnPropertyNames()'
  '-obj Object.isExtensible(obj)':
    'prefix': 'Object-isExtensible'
    'body': 'Object.isExtensible($1)'
  '-obj Object.isSealed(obj)':
    'prefix': 'Object-isSealed'
    'body': 'Object.isSealed($1)'
  '-obj Object.isFrozen(obj)':
    'prefix': 'Object-isFrozen'
    'body': 'Object.isFrozen($1)'
  '-obj Object.preventExtensions(obj)':
    'prefix': 'Object-preventExtensions'
    'body': 'Object.preventExtensions($1)'
  '-obj Object.seal(obj)':
    'prefix': 'Object-seal'
    'body': 'Object.seal($1)'
  '-obj Object.freeze(obj)':
    'prefix': 'Object-freeze'
    'body': 'Object.freeze($1)'
  '-obj writable':
    'prefix': 'writable'
    'body': 'writable' 
  '-obj enumerable':
    'prefix': 'enumerable'
    'body': 'enumerable' 
  '-obj configurable':
    'prefix': 'configurable'
    'body': 'configurable' 
  # bol ------------------------------------------------
  '-bol Boolean':
    'prefix': 'Boolean'
    'body': 'Boolean'
  '-bol Boolean($1)':
    'prefix': 'Boolean1'
    'body': 'Boolean($1)'
  # num ------------------------------------------------
  '-num Infinity':
    'prefix': 'Infinity'
    'body': 'Infinity'
  '-num Number':
    'prefix': 'Number1 '
    'body': 'Number'
  '-num Number($1)':
    'prefix': 'Number num'
    'body': 'Number($1)'
  '-num Number.NaN':
    'prefix': 'Number.NaN'
    'body': 'Number.NaN'
  '-num Number.MAX_VALUE':
    'prefix': 'Number.MAX_VALUE'
    'body': 'Number.MAX_VALUE'
  '-num Number.MIN_VALUE':
    'prefix': 'Number.MIN_VALUE'
    'body': 'Number.MIN_VALUE'
  '-num Number.NEGATIVE_INFINITY':
    'prefix': 'Number.NEGATIVE_INFINITY'
    'body': 'Number.NEGATIVE_INFINITY'
  '-num Number.POSITIVE_INFINITY':
    'prefix': 'Number.POSITIVE_INFINITY'
    'body': 'Number.POSITIVE_INFINITY'
  '-num .toFixed(num)':
    'prefix': 'toFixed'
    'body': 'toFixed($1)'
  '-num .toExponential(x)':
    'prefix': 'toExponential'
    'body': 'toExponential($1)'
  '-num .toPrecision(x)':
    'prefix': 'toPrecision'
    'body': 'toPrecision($1)'
  # str ------------------------------------------------
  '-str String':
    'prefix': 'String str'
    'body': 'String'
  '-str String($1)':
    'prefix': 'String1'
    'body': 'String($1)'
  '-str String.fromCharCode(num,num...)':
    'prefix': 'String-fromCharCode'
    'body': 'String.fromCharCode($1)'
  '-str .charAt(idx)':
    'prefix': 'charAt'
    'body': 'charAt($1)'
  '-str .charCodeAt(idx)':
    'prefix': 'charCodeAt'
    'body': 'charCodeAt($1)'
  '-str .substr(begin[,num])':
    'prefix': 'substr'
    'body': 'substr($1)'
  '-str .substring(idx1,idx2)':
    'prefix': 'substring'
    'body': 'substring($1)'
  '-str .search(str/rgep)':
    'prefix': 'search'
    'body': 'search($1)'
  '-str .match(str/rgep)':
    'prefix': 'match'
    'body': 'match($1)'
  '-str .localCompare(str)':
    'prefix': 'localCompare'
    'body': 'localCompare($1)'
  '-str .replace(regexp/str,replacement)':
    'prefix': 'replace'
    'body': 'replace($1,$2)'
  '-str .split(str/rgep)':
    'prefix': 'split'
    'body': 'split($1)'
  '-str .trim()':
    'prefix': 'trim'
    'body': 'trim()'
  '-str .toUpperCase()':
    'prefix': 'toUpperCase'
    'body': 'toUpperCase()'
  '-str .toLowerCase()':
    'prefix': 'toLowerCase'
    'body': 'toLowerCase()'
  '-str .toLocaleLowerCase()':
    'prefix': 'toLocaleLowerCase'
    'body': 'toLocaleLowerCase()'
  '-str .toLocaleUpperCase()':
    'prefix': 'toLocaleUpperCase'
    'body': 'toLocaleUpperCase()'
  '-str/arr .slice(begin[,end])':
    'prefix': 'slice'
    'body': 'slice($1)'
  '-str/arr .includes("$1")':
    'prefix': 'includes'
    'body': 'includes("$1")'
  '-str/arr .indexOf(val[,begin])':
    'prefix': 'indexOf'
    'body': 'indexOf($1,0$2)$3'
  '-str/arr .lastIndexOf($1)':
    'prefix': 'lastIndexOf'
    'body': 'lastIndexOf($1)'
  '-str/arr .concat($1)':
    'prefix': 'concat'
    'body': 'concat($1)'
  '-str/RE .compile(rgep,modifier)':
    'prefix': 'compile'
    'body': 'compile($1)'
  # arr ------------------------------------------------
  '-arr Array':
    'prefix': 'Array arr'
    'body': 'Array'
  '-arr Array.isArray(arr)':
    'prefix': 'Array-isArray'
    'body': 'Array.isArray($1)'
  '-arr .pop()':
    'prefix': 'pop'
    'body': 'pop()'
  '-arr .shift()':
    'prefix': 'shift'
    'body': 'shift()'
  '-arr .push($1)':
    'prefix': 'push'
    'body': 'push($1)'
  '-arr .unshift(val1[,val2,...])':
    'prefix': 'unshift'
    'body': 'unshift($1)'
  '-arr .splice(begin ,num ,v1,v2,...)':
    'prefix': 'splice'
    'body': 'splice(${1:begin},${2:num},${3:v1,v2,...})'
  '-arr .sort([foo])':
    'prefix': 'sort'
    'body': """sort(${1:function(val1,val2){
      return ${2:true[改变顺序]}
    }})"""
  '-arr .join([str])':
    'prefix': 'join'
    'body': 'join($1)'
  '-arr .forEach(foo) ':
    'prefix': 'forEach'
    'body': """forEach(function(val,idx,arr){
      $1
    })"""
  '-arr .map(cfoo[,this])':
    'prefix': 'map'
    'body': """var res = arr.map(function(val,idx,arr1){
      return $1
    } )"""
  '-arr .every(foo [,this])':
    'prefix': 'every'
    'body': """every(function(val,idx,arr){
      return ${2:[全部为真时,才为真]}
    },${1:this})"""
  '-arr .some(foo [,this])':
    'prefix': 'some'
    'body': """some(function(val,idx,arr){
      return ${2:[若存在返回值为真则返回真]}
    } ${1:,this})"""
  '-arr .reverse()':
    'prefix': 'reverse'
    'body': 'reverse()'
  '-arr .filter(foo [,this])':
    'prefix': 'filter'
    'body': """filter(function(val,idx,arr){
        return ${2:true[保留]}
      } ,${1:this})"""
  '-arr .reduce(foo[,initVal])':
    'prefix': 'reduce'
    'body': """reduce(function(retVal,currVal,idx,arr){ 
      return $2 
    },${1:initVal})"""
  '-arr .reduceRight(foo[,initVal])':
    'prefix': 'reduceRight'
    'body': """reduceRight(function(retVal,currVal,idx,arr){ 
      return $2 
    },${1:initVal})"""
  # fn ------------------------------------------------
  '-fn arguments':
    'prefix': 'arguments'
    'body': 'arguments'
  '-fn caller':
    'prefix': 'caller'
    'body': 'caller'
  '-fn .prototype':
    'prefix': 'prototype'
    'body': 'prototype'
  '-fn function(){\n}$1':
    'prefix': 'function1'
    'body': 'function(){\n}$1'
  '-fn function $1($2){$3\n}':
    'prefix': 'function2'
    'body': 'function $1($2){$3\n}'
  '-fn (function ($1){$3\n})($2)':
    'prefix': 'function3'
    'body': '(function ($1){$3\n})($2)'
